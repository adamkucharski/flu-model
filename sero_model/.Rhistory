modelA
datatab
datatab$temp=rnorm(time,mean=20,sd=2)
datatab$ad_spend=rnorm(time,mean=10000,sd=10)
datatab$price=runif(time,1,100)
datatab$competitor=rnorm(time,mean=100,sd=10)
salesfn<-function(temp,ad_spend,price){
100+0.2*temp+0.5*ad_spend-0.6*price
}
datatab$sales=salesfn(datatab$temp,datatab$ad_spend,datatab$price)
datatab=round(datatab)
modelA <- glm(sales ~ temp + ad_spend + price + competitor, data = datatab,family = gaussian())
modelA
datatab
modelA
time=1000
datatab<-data.frame(matrix(NA,nrow=time,ncol=5))
names(datatab)=c("sales","temp","ad_spend","price","competitor")
datatab$temp=rnorm(time,mean=20,sd=2)
datatab$ad_spend=rnorm(time,mean=10000,sd=10)
datatab$price=runif(time,1,100)
datatab$competitor=rnorm(time,mean=100,sd=10)
salesfn<-function(temp,ad_spend,price){
100+0.2*temp+0.5*ad_spend-0.6*price
}
datatab$sales=salesfn(datatab$temp,datatab$ad_spend,datatab$price)
datatab=round(datatab)
modelA <- glm(sales ~ temp + ad_spend + price + competitor, data = datatab,family = gaussian())
modelA
modelA <- gam(sales ~ temp + ad_spend + price + competitor, data = datatab,family = gaussian())
modelA
summary(modelA)
modelA <- glm(sales ~ temp + ad_spend + price + competitor, data = datatab,family = gaussian())
summary(modelA)
time=10
datatab<-data.frame(matrix(NA,nrow=time,ncol=5))
names(datatab)=c("sales","temp","ad_spend","price","competitor")
datatab$temp=rnorm(time,mean=20,sd=2)
datatab$ad_spend=rnorm(time,mean=10000,sd=10)
datatab$price=runif(time,1,100)
datatab$competitor=rnorm(time,mean=100,sd=10)
salesfn<-function(temp,ad_spend,price){
100+0.2*temp+0.5*ad_spend-0.6*price
}
datatab$sales=salesfn(datatab$temp,datatab$ad_spend,datatab$price)
datatab=round(datatab)
modelA <- glm(sales ~ temp + ad_spend + price + competitor, data = datatab,family = gaussian())
summary(modelA)
modelA
datatab
modelA
modelA <- glm(sales ~  ad_spend , data = datatab,family = gaussian())
modelA
datatab
modelA
plot(modelA)
dev.off()
plot(modelA)
modelA <- glm(sales ~ temp + ad_spend + price + competitor, data = datatab,family = gaussian())
modelA
datatab
modelA
summary(modelA)
datatab
summary(modelA)
datatab
time=100
datatab<-data.frame(matrix(NA,nrow=time,ncol=5))
names(datatab)=c("sales","temp","ad_spend","price","competitor")
datatab$temp=rnorm(time,mean=20,sd=2)
datatab$ad_spend=rnorm(time,mean=10000,sd=10)
datatab$price=runif(time,1,100)
datatab$competitor=rnorm(time,mean=100,sd=10)
salesfn<-function(temp,ad_spend,price){
100+0.2*temp+0.5*ad_spend-0.6*price
}
datatab$sales=salesfn(datatab$temp,datatab$ad_spend,datatab$price)
datatab=round(datatab)
modelA <- glm(sales ~ temp + ad_spend + price + competitor, data = datatab,family = gaussian())
summary(modelA)
datatab
modelA
summary(modelA)
modelA
datatab
modelA
time=10
datatab<-data.frame(matrix(NA,nrow=time,ncol=5))
names(datatab)=c("sales","temp","ad_spend","price","competitor")
datatab$temp=rnorm(time,mean=20,sd=2)
datatab$ad_spend=rnorm(time,mean=10000,sd=10)
datatab$price=runif(time,1,100)
datatab$competitor=rnorm(time,mean=100,sd=10)
salesfn<-function(temp,ad_spend,price){
100+0.2*temp+0.5*ad_spend-0.6*price
}
datatab$sales=salesfn(datatab$temp,datatab$ad_spend,datatab$price)
datatab=round(datatab)
datatab
time=5
datatab<-data.frame(matrix(NA,nrow=time,ncol=5))
names(datatab)=c("sales","temp","ad_spend","price","competitor")
datatab$temp=rnorm(time,mean=20,sd=2)
datatab$ad_spend=rnorm(time,mean=10000,sd=10)
datatab$price=runif(time,1,100)
datatab$competitor=rnorm(time,mean=100,sd=10)
salesfn<-function(temp,ad_spend,price){
100+0.2*temp+0.5*ad_spend-0.6*price
}
datatab$sales=salesfn(datatab$temp,datatab$ad_spend,datatab$price)
datatab=round(datatab)
datatab
modelA <- glm(sales ~ temp + ad_spend + price + competitor, data = datatab,family = gaussian())
modelA
summary(modelA)
time=10
datatab<-data.frame(matrix(NA,nrow=time,ncol=5))
names(datatab)=c("sales","temp","ad_spend","price","competitor")
datatab$temp=rnorm(time,mean=20,sd=2)
datatab$ad_spend=rnorm(time,mean=10000,sd=10)
datatab$price=runif(time,1,100)
datatab$competitor=rnorm(time,mean=100,sd=10)
salesfn<-function(temp,ad_spend,price){
100+0.2*temp+0.5*ad_spend-0.6*price
}
datatab$sales=salesfn(datatab$temp,datatab$ad_spend,datatab$price)
datatab=round(datatab)
modelA <- glm(sales ~ temp + ad_spend + price + competitor, data = datatab,family = gaussian())
summary(modelA)
summary(modelA)
modelA
summary(modelA)
modelA
# Model of serological dynamics - uses PLOS Biology model (Kucharski et al. 2015)
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Load data (Fonville et al.)
options(StringsAsFactors=F)
data1=read.csv("datasets/HaNamCohort.csv", as.is=T)
# List test strains
nstrains=length(data1)-2
strain_names=names(data1)[3:(nstrains+2)]
test.index=c(1:nstrains)
# Convert to log titres and set missing data = NA
data1[data1=="*"]=NA
data1[,strain_names]=apply(data1[,strain_names],2,function(x){log2(as.numeric(x)/10)+1})
# Convert names into strain years
strain_years=as.numeric(sapply(strain_names,function(x){
a1=max(which(strsplit(x, "")[[1]]=="."))
lstr=nchar(x)
yr1=substr(x, a1+1, lstr)
if(nchar(yr1)>4){yr1=substr(yr1, 1, 4)}
year=yr1
if(nchar(yr1)==2 & as.numeric(yr1)>15){year=paste("19",yr1,sep="")}
if(nchar(yr1)==2 & as.numeric(yr1)<15){year=paste("20",yr1,sep="")}
year
}
))
strain_years_unique=sort(unique(strain_years))
# Gather participants and infection years
n_part=max(data1$Subject.number)
inf_years=seq(min(strain_years),max(strain_years)) #annual infection model
inf.n=length(inf_years)
test.years=unique(data1$Sample.year)
test.n=length(test.years)
# Set up list of test data for quick access
data.Test=data1[,strain_names]
test.list=list()
for(ii in 1:n_part){
subjectn=ii
i.list=list()
for(jj in 1:test.n){
testyr=test.years[jj]
dataI=data.Test[data1$Subject.number==subjectn & data1$Sample.year==testyr,]
i.list[[jj]]=rbind(rep(testyr,nstrains),
dataI[,!is.na(dataI)],
strain_years[!is.na(dataI)],
strain_years[test.index[!is.na(dataI)]]-min(strain_years)+1
)
}
test.list[[ii]]=i.list
}
setwd("~/Dropbox/Imperial/Fluscape_2")
# Model of serological dynamics - uses PLOS Biology model (Kucharski et al. 2015)
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Load data (Fonville et al.)
options(StringsAsFactors=F)
data1=read.csv("datasets/HaNamCohort.csv", as.is=T)
# List test strains
nstrains=length(data1)-2
strain_names=names(data1)[3:(nstrains+2)]
test.index=c(1:nstrains)
# Convert to log titres and set missing data = NA
data1[data1=="*"]=NA
data1[,strain_names]=apply(data1[,strain_names],2,function(x){log2(as.numeric(x)/10)+1})
# Convert names into strain years
strain_years=as.numeric(sapply(strain_names,function(x){
a1=max(which(strsplit(x, "")[[1]]=="."))
lstr=nchar(x)
yr1=substr(x, a1+1, lstr)
if(nchar(yr1)>4){yr1=substr(yr1, 1, 4)}
year=yr1
if(nchar(yr1)==2 & as.numeric(yr1)>15){year=paste("19",yr1,sep="")}
if(nchar(yr1)==2 & as.numeric(yr1)<15){year=paste("20",yr1,sep="")}
year
}
))
strain_years_unique=sort(unique(strain_years))
# Gather participants and infection years
n_part=max(data1$Subject.number)
inf_years=seq(min(strain_years),max(strain_years)) #annual infection model
inf.n=length(inf_years)
test.years=unique(data1$Sample.year)
test.n=length(test.years)
# Set up list of test data for quick access
data.Test=data1[,strain_names]
test.list=list()
for(ii in 1:n_part){
subjectn=ii
i.list=list()
for(jj in 1:test.n){
testyr=test.years[jj]
dataI=data.Test[data1$Subject.number==subjectn & data1$Sample.year==testyr,]
i.list[[jj]]=rbind(rep(testyr,nstrains),
dataI[,!is.na(dataI)],
strain_years[!is.na(dataI)],
strain_years[test.index[!is.na(dataI)]]-min(strain_years)+1
)
}
test.list[[ii]]=i.list
}
# Model of serological dynamics - uses PLOS Biology model (Kucharski et al. 2015)
library(reshape2)
library(foreach)
library(doMC)
library(mvtnorm)
registerDoMC(4)  #change the 2 to your number of CPU cores
getDoParWorkers()
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Load data (Fonville et al.)
setwd("~/Dropbox/Imperial/Fluscape_2/sero_model/")
source("load_data.R")
source("sero_functions.R")
setwd("~/Dropbox/Imperial/Fluscape_2/sero_model/")
# Model of serological dynamics - uses PLOS Biology model (Kucharski et al. 2015)
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Load data (Fonville et al.)
options(StringsAsFactors=F)
data1=read.csv("datasets/HaNamCohort.csv", as.is=T)
# List test strains
nstrains=length(data1)-2
strain_names=names(data1)[3:(nstrains+2)]
test.index=c(1:nstrains)
# Convert to log titres and set missing data = NA
data1[data1=="*"]=NA
data1[,strain_names]=apply(data1[,strain_names],2,function(x){log2(as.numeric(x)/10)+1})
# Convert names into strain years
strain_years=as.numeric(sapply(strain_names,function(x){
a1=max(which(strsplit(x, "")[[1]]=="."))
lstr=nchar(x)
yr1=substr(x, a1+1, lstr)
if(nchar(yr1)>4){yr1=substr(yr1, 1, 4)}
year=yr1
if(nchar(yr1)==2 & as.numeric(yr1)>15){year=paste("19",yr1,sep="")}
if(nchar(yr1)==2 & as.numeric(yr1)<15){year=paste("20",yr1,sep="")}
year
}
))
strain_years_unique=sort(unique(strain_years))
# Gather participants and infection years
n_part=max(data1$Subject.number)
inf_years=seq(min(strain_years),max(strain_years)) #annual infection model
inf.n=length(inf_years)
test.years=unique(data1$Sample.year)
test.n=length(test.years)
# Set up list of test data for quick access
data.Test=data1[,strain_names]
test.list=list()
for(ii in 1:n_part){
subjectn=ii
i.list=list()
for(jj in 1:test.n){
testyr=test.years[jj]
dataI=data.Test[data1$Subject.number==subjectn & data1$Sample.year==testyr,]
i.list[[jj]]=rbind(rep(testyr,nstrains),
dataI[,!is.na(dataI)],
strain_years[!is.na(dataI)],
strain_years[test.index[!is.na(dataI)]]-min(strain_years)+1
)
}
test.list[[ii]]=i.list
}
# Model of serological dynamics - uses PLOS Biology model (Kucharski et al. 2015)
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Load data (Fonville et al.)
setwd("~/Dropbox/Imperial/Fluscape_2/sero_model/")
source("load_data.R")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Pick sample year and plot
subjectn=1
sample_yr=2012
dataplot1=data1[data1$Subject.number==subjectn,]
points1=dataplot1[dataplot1$Sample.year==sample_yr,]
dataplot2=data1[data1$Subject.number==subjectn,]
points2=dataplot2[dataplot2$Sample.year==2007,]
sortyr=order(strain_years)
#par(mar = c(5,4,4,2) + 0.1)
plot(strain_years+runif(nstrains,0,0.1),as.numeric(points1[,strain_names])+runif(nstrains,0,0.1),xlab="test strain (year of circulation)",ylab="log titre",ylim=c(0,7),col=rgb(0,0,1),pch=19,cex=0.5)
points(strain_years+runif(nstrains,0,0.1),as.numeric(points2[,strain_names])+runif(nstrains,0,0.1),col=rgb(1,0,0),pch=19,cex=0.5)
#axis(1, at=c(1:nstrains), labels=strain_names[sortyr], las=2)
grid(nx = NULL, ny = F, col = "lightgray",lty = "dotted")
dev.copy(pdf,paste("figures/Plot_A",sample_yr,".pdf",sep=""),width=8,height=6)
dev.off()
data1
head(data1)
test.years
inf.n
inf.n
inf_years
strain_years
thetatab
# Model of serological dynamics - uses PLOS Biology model (Kucharski et al. 2015)
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Load data (Fonville et al.)
options(StringsAsFactors=F)
data1=read.csv("datasets/HaNamCohort.csv", as.is=T)
# List test strains
nstrains=length(data1)-2
strain_names=names(data1)[3:(nstrains+2)]
test.index=c(1:nstrains)
# Convert to log titres and set missing data = NA
data1[data1=="*"]=NA
data1[,strain_names]=apply(data1[,strain_names],2,function(x){log2(as.numeric(x)/10)+1})
# Convert names into strain years
strain_years=as.numeric(sapply(strain_names,function(x){
a1=max(which(strsplit(x, "")[[1]]=="."))
lstr=nchar(x)
yr1=substr(x, a1+1, lstr)
if(nchar(yr1)>4){yr1=substr(yr1, 1, 4)}
year=yr1
if(nchar(yr1)==2 & as.numeric(yr1)>15){year=paste("19",yr1,sep="")}
if(nchar(yr1)==2 & as.numeric(yr1)<15){year=paste("20",yr1,sep="")}
year
}
))
strain_years_unique=sort(unique(strain_years))
# Gather participants and infection years
n_part=max(data1$Subject.number)
inf_years=seq(min(strain_years),max(strain_years)) #annual infection model
inf.n=length(inf_years)
test.years=unique(data1$Sample.year)
test.n=length(test.years)
# Set up list of test data for quick access
data.Test=data1[,strain_names]
test.list=list()
for(ii in 1:n_part){
subjectn=ii
i.list=list()
for(jj in 1:test.n){
testyr=test.years[jj]
dataI=data.Test[data1$Subject.number==subjectn & data1$Sample.year==testyr,]
i.list[[jj]]=rbind(rep(testyr,nstrains),
dataI[,!is.na(dataI)],
strain_years[!is.na(dataI)],
strain_years[test.index[!is.na(dataI)]]-min(strain_years)+1
)
}
test.list[[ii]]=i.list
}
# Model of serological dynamics - uses PLOS Biology model (Kucharski et al. 2015)
library(reshape2)
library(foreach)
library(doMC)
library(mvtnorm)
registerDoMC(4)  #change the 2 to your number of CPU cores
getDoParWorkers()
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Load data (Fonville et al.)
setwd("~/Dropbox/Imperial/Fluscape_2/sero_model/")
source("load_data.R")
source("sero_functions.R")
setwd("~/Dropbox/Imperial/Fluscape_2/sero_model/")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set up parameters
test_year=2012
theta0=c(mu=NA,sigma=NA,tau1=NA,tau2=NA,wane=NA)
theta0[["mu"]]=2
theta0[["sigma"]]=0.25
theta0[["tau1"]]=0.1
theta0[["tau2"]]=0.1
theta0[["wane"]]=0.1
theta=theta0
historyii=rbinom(inf.n, 1, 0.2) # dummy infection history
# Index variables
jj_year=c(1:test.n)[test.years==test_year]
# Specific MCMC matrices
runs=10000
nparam=length(theta)
npcov=rep(1,nparam)
cov_matrix_theta0 = diag(npcov)
varpart_prob=0.1
varind_prob=0.1
thetatab=matrix(NA,nrow=(runs+1),ncol=length(theta))
colnames(thetatab)=names(theta)
thetatab[1,]=theta
historytab=matrix(NA,nrow=n_part,ncol=inf.n)
for(ii in 1:n_part){
historytab[ii,]=setuphistIC(ii,jj_year)
}
colnames(historytab)=as.character(inf_years)
likelihoodtab=matrix(-Inf,nrow=(runs+1),ncol=n_part)
accepttabT=rep(NA,(runs/2))
accepttabH=rep(NA,(runs))
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run MCMC
for (m in 1:runs){
# Adaptive covariance matrix
if(m==1){
epsilon0=0.0001
cov_matrix_theta=epsilon0*cov_matrix_theta0
#varpart_prob0=varpart_prob
}else{
epsilon0=min(0.1,exp(log(epsilon0)+(accept_rateT-0.234)*0.999^m))
cov_matrix_theta=epsilon0*cov_matrix_theta0
#varpart_prob0=min(1,exp(log(varpart_prob0)+(accept_rate-0.234)*0.999^m))
#varpart_prob=varpart_prob0
}
# - - - - - - - - - - - - - - - -
# Resample parameters
#aTime=Sys.time() #TIMER 1
if(m %% 2==1){
theta_star = SampleTheta(thetatab[m,], m,cov_matrix_theta) #resample theta
history_star = historytab
pickA=c(1:n_part)
}else{
pickA=NULL
while(length(pickA)<2){
pickA=sample(n_part, round(varpart_prob*n_part)) # check that not length zero
}
history_star = SampleHistory(historytab,pickA) #resample history
theta_star =thetatab[m,]
}
dmatrix=outputdmatrix(theta_star) # Arrange parameters
# - - - - - - - - - - - - - - - -
# LIKELIHOOD function - Can introduce joint fitting here
lik_val=likelihoodtab[m,]
for(ii in pickA){
# Set history to zero after test date
lik_val[ii]=estimatelik(ii,jj_year,as.numeric(history_star[ii,]),dmatrix,theta_star)
#if(is.na(lik_val[ii])){lik_val[ii]=-Inf}
}
# - - - - - - - - - - - - - - - -
# Metropolis Hastings step
output_prob = ComputeProbability(sum(likelihoodtab[m,]),sum(lik_val))
if(runif(1) < output_prob){
thetatab[m+1,] = theta_star
if(m %% 2==0){historytab = history_star} # Only change if resampled
likelihoodtab[m+1,] = lik_val
if(m %% 2==1){accepttabT[(m+1)/2]=1}
}else{
thetatab[m+1,] = thetatab[m,]
likelihoodtab[m+1,] = likelihoodtab[m,]
if(m %% 2==1){accepttabT[(m+1)/2]=0}
}
if(m<50){
accept_rateT=0.234
}else{
accept_rateT=sum(accepttabT[1:((m+1)/2)])/((m+1)/2)
}
#Sys.time()-aTime  #TIMER 2
if(m %% min(runs,1000) ==0){
#print(c(m,accept_rate,round(pf_likelihoodtab[m])))
save(likelihoodtab,thetatab,historytab,file=paste("posterior_sero_runs/outputR.RData",sep=""))
}
}
plot(rowSums(likelihoodtab),type="l")
hist(as.data.frame(thetatab)$mu)
subjectn=1
sample_yr=2012
dataplot1=data1[data1$Subject.number==subjectn,]
points1=dataplot1[dataplot1$Sample.year==sample_yr,]
dataplot2=data1[data1$Subject.number==subjectn,]
points2=dataplot2[dataplot2$Sample.year==2007,]
sortyr=order(strain_years)
#par(mar = c(5,4,4,2) + 0.1)
plot(strain_years+runif(nstrains,0,0.1),as.numeric(points1[,strain_names])+runif(nstrains,0,0.1),xlab="test strain (year of circulation)",ylab="log titre",ylim=c(0,7),col=rgb(0,0,1),pch=19,cex=0.5)
points(strain_years+runif(nstrains,0,0.1),as.numeric(points2[,strain_names])+runif(nstrains,0,0.1),col=rgb(1,0,0),pch=19,cex=0.5)
#axis(1, at=c(1:nstrains), labels=strain_names[sortyr], las=2)
grid(nx = NULL, ny = F, col = "lightgray",lty = "dotted")
dev.off()
subjectn=1
sample_yr=2012
dataplot1=data1[data1$Subject.number==subjectn,]
points1=dataplot1[dataplot1$Sample.year==sample_yr,]
dataplot2=data1[data1$Subject.number==subjectn,]
points2=dataplot2[dataplot2$Sample.year==2007,]
sortyr=order(strain_years)
#par(mar = c(5,4,4,2) + 0.1)
plot(strain_years+runif(nstrains,0,0.1),as.numeric(points1[,strain_names])+runif(nstrains,0,0.1),xlab="test strain (year of circulation)",ylab="log titre",ylim=c(0,7),col=rgb(0,0,1),pch=19,cex=0.5)
points(strain_years+runif(nstrains,0,0.1),as.numeric(points2[,strain_names])+runif(nstrains,0,0.1),col=rgb(1,0,0),pch=19,cex=0.5)
#axis(1, at=c(1:nstrains), labels=strain_names[sortyr], las=2)
grid(nx = NULL, ny = F, col = "lightgray",lty = "dotted")
plot(strain_years+runif(nstrains,0,0.1),as.numeric(points1[,strain_names])+runif(nstrains,0,0.1),xlab="test strain (year of circulation)",ylab="log titre",ylim=c(0,7),col=rgb(0,0,1),pch=19,cex=0.5)
points(strain_years+runif(nstrains,0,0.1),as.numeric(points2[,strain_names])+runif(nstrains,0,0.1),col=rgb(1,0,0),pch=19,cex=0.5)
strain_years
as.numeric(points1[,strain_names])+runif(nstrains,0,0.1)
strain_years+runif(nstrains,0,0.1)
plot(strain_years+runif(nstrains,0,0.1),as.numeric(points1[,strain_names])+runif(nstrains,0,0.1),xlab="test strain (year of circulation)",ylab="log titre",ylim=c(0,7),col=rgb(0,0,1),pch=19,cex=0.5)
plot(c(1,2,3))
dev.off()
dev.off()
plot(c(1,2,3))
plot(c(1,2,3))
