ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=1
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=5
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=5
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# Simulate outbreak
xx=c(1:150)
plot(xx,0*xx,ylim=c(0,50),col='white',ylab="new cases",xlab="disease generation")
casetot=NULL
runs=5
cols <- sample(rainbow(runs, s = 1, v = 1, start = 0.7, end = 1))
for(ii in 1:runs){
casetab<-1
ncases<-1
while(ncases>0 & (sum(casetab)<10000)){
newcases=sapply(runif(ncases),function(x){if(x<1/3){0}else{if(x>2/3){2}else{1}} })
casetab=c(casetab,sum(newcases))
ncases=sum(newcases)
}
lines((casetab),col=cols[ii])
points(length(casetab),tail(casetab,1),pch=19,cex=0.5,col=cols[ii])
casetot=rbind(casetot,c(ii,sum(casetab)))
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# MAIN CODE TO LOAD MODEL AND SIMULATE EPIDEMICS
# Ring vaccination analysis
# Paper: Kucharski et al. Effectiveness of Ring Vaccination as Control Strategy for Ebola Virus Disease. EID, 2016
# - - - - - - - - - - - - - - - - - - - - - - - - - - - -
library(fitdistrplus)
library(foreach)
library(doMC)
library(mvtnorm)
library(dplyr)
clust1<-registerDoMC(4)  # number of CPU cores
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Repeated outbreaks
# Guinea: R=0.66 and Rmissed=7
early.ep=0
source("~/Documents/ebola/analysis/ring_vaccine_multi_cluster_model.r") # Load model
source("~/Documents/ebola/analysis/ring_vaccine_load_params.r",local=TRUE) # Load params
source("~/Documents/ebola/analysis/ring_vaccine_analysis.r",local=TRUE) # Load params
plot_result_ring()
plot_result_ring()
# Model of serological dynamics - uses extended PLOS Biology model (Kucharski et al. 2015)
# Author: AJ Kucharski (2015-)
# Main execution code
setwd("~/Documents/flu-model/sero_model/")
# setwd("~/Dropbox/git/flu-model/sero_model")
library(reshape2)
library(mvtnorm)
library(MASS)
library(coda)
library(RColorBrewer)
library(magrittr)
library(plot3D)
library(colorspace)
library(foreach)
library(doMC)
registerDoMC(4)  #change the 2 to your number of CPU cores
getDoParWorkers()
rm(list=ls(all=TRUE))
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Load data and functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#source("load_data.R") # Reformat HaNam data and save to file
# make_fluscape_rdata(pathfssvn="~/fluscape/trunk/") # Reformat Flu B data and save to file
source("sero_functions.R")
source("posterior_analysis_flu.R")
source("sero_funcs_steven.r") # Load Flu B format
compile.c() # Compile c code
flutype0="H3HN"
if(flutype0=="H3FS"){ dy1=c(2009) }
if(flutype0=="H3HN"){ dy1=c(2007:2012) }
if(flutype0=="B"){ dy1=c(2011,2012) }
if(flutype0=="H1"){ dy1=c(2009:2011) }
load.flu.map.data()
load("datasets/spline_fn.RData") # load spline function for map **NEED TO LOAD THIS before inference run**
ag.coord=read.csv("datasets/antigenic_coords.csv", as.is=T,head=T)
ag.coord
# Model of serological dynamics - uses extended PLOS Biology model (Kucharski et al. 2015)
# Author: AJ Kucharski (2015-)
# Main execution code
setwd("~/Documents/flu-model/sero_model/")
# setwd("~/Dropbox/git/flu-model/sero_model")
library(reshape2)
library(mvtnorm)
library(MASS)
library(coda)
library(RColorBrewer)
library(magrittr)
library(plot3D)
library(colorspace)
library(foreach)
library(doMC)
registerDoMC(4)  #change the 2 to your number of CPU cores
getDoParWorkers()
rm(list=ls(all=TRUE))
source("sero_functions.R")
source("posterior_analysis_flu.R")
source("sero_funcs_steven.r") # Load Flu B format
compile.c() # Compile c code
flutype0="H3HN"
if(flutype0=="H3FS"){ dy1=c(2009) }
if(flutype0=="H3HN"){ dy1=c(2007:2012) }
if(flutype0=="B"){ dy1=c(2011,2012) }
if(flutype0=="H1"){ dy1=c(2009:2011) }
load.flu.map.data()
load("datasets/spline_fn.RData") # load spline function for map **NEED TO LOAD THIS before inference run**
load("R_datasets/HaNam_data.RData")
test.list
test.list[[1]]
strain_years
plot(strain_years)
hist(strain_years)
hist(strain_years,breaks=seq(1968,2012))
