datasetMAIN=dataset1[!is.na(datasetP[,1]),] # Characteristics for participants - for file
dataset1f=dataset1a[!is.na(datasetP[,1]),] # contact data for participants - for file
datasetPA=matrix(match(dataset1f, idlistAll),ncol=7) # anonymised contact data - for file
nameround=dataset1$Round[!is.na(datasetP[,1])] # list of round - for file
# Output full dataset - both rounds paired data only
datacol1=cbind(datasetMAIN$MF,datasetMAIN$Travel,datasetMAIN$X,datasetMAIN$X.1,datasetMAIN$X.2,datasetMAIN$Club,datasetMAIN$X.3,datasetMAIN$X.4,datasetMAIN$Flu,datasetMAIN$X.5,datasetMAIN$Siblings,datasetMAIN$Convo
)
datacol2=cbind(nameround,datasetPA,datacol1[,])
colnames(datacol2)=c("Round","Participant","Contact_1","Contact_2","Contact_3","Contact_4","Contact_5","Contact_6","Sex","Travel","Travel","Travel","Travel","Clubs","Clubs","Clubs","Flu","Flu","Siblings","Conversation")
datacol2[is.na(datacol2)]=""
datacol2=as.data.frame(datacol2)
datacol2$Round=as.numeric(levels(datacol2$Round)[datacol2$Round])
datacol2$Participant=as.numeric(levels(datacol2$Participant)[datacol2$Participant])
datacol2=datacol2[order(datacol2$Round,datacol2$Participant),]
write.csv(datacol2,paste("~/Dropbox/LSHTM/Schools_project_2014/School_data_14/output_data/Data_All_",school1,".csv",sep=""))
}
# Construct matrices for plots
datasetP=datasetP[!is.na(datasetP[,1]),] # Exclude non-participants from matrix - for plot
datasetP[datasetMAIN$Round!=round1,1:7]=NA # Pick only contacts in this round - for plot
# - - - - - - - - - - - - - - - - - -
# Analysis tools
# - - - - - - - - - - - - - - - - - -
# Calculate mutual contacts
mutual=1
if(mutual==1){
datasetM=datasetP
for(ii in 1:length(datasetP[,1])){
# Find mutual links - check indexing carefully!
datasetM[ii,2:7]=sapply(datasetM[ii,2:7],function(x){  if( !is.na(match(x,datasetP[,1])) ){if( sum(datasetM[match(x,datasetP[,1]),!is.na(datasetM[match(x,datasetP[,1]),])] ==datasetP[ii,1])==1 ){x}else{NA}}else{NA}  })
}
if(paired1!=1){
#partp=datasetM[datasetMAIN$Round==round1,1]   # Makes sure only paired participants are included
#datasetM=matrix(match(datasetM, partp),ncol=7) # Converts to index
}
NetworkMatrix=datasetM
}else{
# Adjust so only contacts in this round plotted
if(paired1==1){
datasetM=datasetP
partp=datasetM[dataset1$Round==round1,1]
NetworkMatrix=matrix(match(datasetM, partp),ncol=7) # Note that this reorders things - so need to use original labels from datasetRound!
}else{
NetworkMatrix=datasetP
}
}
# Distribution of contacts
distn_contact=apply(datasetP[!is.na(datasetP[,1]),2:7],1,function(x){ sum(!is.na(x)) } )
#hist(distn_contact)
# - - - - - - - - - - - - - - - - - -
# Plotting tools
# - - - - - - - - - - - - - - - - - -
# Convert to network readable code
x1=apply(NetworkMatrix, 1, function(x) c(rbind(rep(x[1],6),x[2:7])) )
dim(x1)<-NULL
x2=matrix(x1,ncol=2,byrow=TRUE)
x2=x2[!is.na(x2[,2]),]
x2=x2[(x2[,1]-x2[,2])!=0,]
write.csv(x2,paste("~/Dropbox/LSHTM/Schools_project_2014/School_data_14/output_data/Data_plot_s",school1,"_r",round1,ifelse(mutual==1,"m",""),".csv",sep=""))
# Plot graph
g2<-graph.edgelist(x2)
#set.seed(103)
set.seed(103)
#coord <- layout.fruchterman.reingold(g2)
coord <- layout.kamada.kawai(g2)
#coord <- layout.circle(g2)
if(round1==1){
coord1=coord
}else{
coord <- coord1
}
write.csv(x2,paste("~/Dropbox/LSHTM/Schools_project_2014/School_data_14/output_data/Data_plot_s",school1,"_r",round1,ifelse(mutual==1,"m",""),".csv",sep=""))
#write.csv(get.adjacency(g2,sparse=FALSE),paste("~/Dropbox/LSHTM/Schools_project_2014/School_data_14/output_data/Data_matrix_s",school1,"_r",round1,ifelse(mutual==1,"m",""),".csv",sep=""))
par(mai=c(0,0,0,0)) #Flu colours
col1=datasetRound$Flu
col1[is.na(col1)]=0
col1flu=sapply(col1,function(x){ifelse(x==1,'red','white')})
# MF colours
col1=datasetRound$MF
col1[is.na(col1)]=0
col1mf=sapply(col1,function(x){ifelse(x==2,'pink','cyan')})
col1mf=sapply(col1,function(x){ifelse(x==2,'grey','white')})
shapeMFcol=sapply(col1,function(x){ifelse(x==2,'grey','white')})
shapeMF=sapply(col1,function(x){ifelse(x==2,'circle','square')})
colby=3
colname=c("all","flu","MF")
coltab=cbind(datasetP[datasetMAIN$Round==round1,1],rep('white',length(col1flu)),col1flu,col1mf)
coltab=coltab[match(sort(as.numeric(coltab[,1])),as.numeric(coltab[,1])),] # Sort by colour
pickcol=coltab[,colby+1]
if(round1==1){
pickcol1=pickcol
}else{
pickcol <- pickcol1
}
#plot(g2,layout=coord,vertex.size=8,vertex.label=NA,vertex.color=pickcol,vertex.label.cex=0.5,vertex.label.family="",edge.arrow.size=0,edge.width=2) #,
plot(g2,layout=coord,vertex.size=6,vertex.shape=shapeMF,vertex.color=shapeMFcol,vertex.label=NA,edge.arrow.size=0,edge.width=2)
#plot(g2,layout=coord,vertex.size=8,vertex.label=sort(as.numeric(coltab[,1])),vertex.color=pickcol,vertex.label.cex=0.5,vertex.label.family="",edge.arrow.size=0,edge.width=2) #,
write.csv(coltab,paste("~/Dropbox/LSHTM/Schools_project_2014/School_data_14/output_data/Data_plot_s",school1,"_r",round1,ifelse(mutual==1,"m",""),"_col.csv",sep=""))
dev.copy(pdf,paste("~/Dropbox/LSHTM/Schools_project_2014/School_data_14/output_data/Network_s",school1,"_r",round1,"_",colname[colby],".pdf",sep=""),width=6,height=6)
dev.off()
sort(idlistAll)
log(0.5)
-log(0.5)/0.17
rnorm(100,mean=10,sd=10)
rnorm(100,mean=100,sd=10)
rnorm(100,mean=100,sd=10)
rnorm(100,mean=100,sd=2)
nn=1000
rnorm(nn,mean=100,sd=10)
rnorm(nn,mean=100,sd=2)
rep(100,nn)
cbind(rnorm(nn,mean=100,sd=10),rnorm(nn,mean=100,sd=2),rep(100,nn))
nn=1000
a1=cbind(rnorm(nn,mean=100,sd=10),rnorm(nn,mean=100,sd=2),rep(100,nn))
apply(a1,function(x){c(1:3)[a1==max(a1)]})
apply(a1,function(x){c(1:3)[x==max(x)]})
nn=1000
a1=cbind(rnorm(nn,mean=100,sd=10),rnorm(nn,mean=100,sd=2),rep(100,nn))
apply(a1,function(x){c(1:3)[x==max(x)]})
a1
c(1:3)
x=a1[1]
apply(a1,2,function(x){c(1:3)[x==max(x)]})
apply(a1,1,function(x){c(1:3)[x==max(x)]})
sapply(c(1,2,3),function(x){sum(a2==x)})
a2=apply(a1,1,function(x){c(1:3)[x==max(x)]})
sapply(c(1,2,3),function(x){sum(a2==x)})
nn=1000
a1=cbind(rnorm(nn,mean=100,sd=10),rep(100,nn))
a2=apply(a1,1,function(x){c(1:3)[x==max(x)]})
sapply(c(1,2,3),function(x){sum(a2==x)})
a1=cbind(rnorm(nn,mean=100,sd=10),rep(100,nn))
a2=sapply(a1,function(x){c(1:2)[x==max(x)]})
a2
a1=cbind(rnorm(nn,mean=100,sd=10),rep(100,nn))
a1
a2=apply(a1,1,function(x){c(1:2)[x==max(x)]})
a2
sapply(c(1,2),function(x){sum(a2==x)})
nn=10000
a1=cbind(rnorm(nn,mean=100,sd=10),rnorm(nn,mean=100,sd=2),rep(100,nn))
a2=apply(a1,1,function(x){c(1:3)[x==max(x)]})
sapply(c(1,2,3),function(x){sum(a2==x)})
a1=cbind(rnorm(nn,mean=100,sd=10),rep(100,nn))
a2=apply(a1,1,function(x){c(1:2)[x==max(x)]})
sapply(c(1,2),function(x){sum(a2==x)})
a1=cbind(rnorm(nn,mean=100,sd=2),rep(100,nn))
a2=apply(a1,1,function(x){c(1:2)[x==max(x)]})
sapply(c(1,2),function(x){sum(a2==x)})
# Different variances
nn=10000
a1=cbind(rnorm(nn,mean=100,sd=10),rnorm(nn,mean=100,sd=2),rep(100,nn))
a2=apply(a1,1,function(x){c(1:3)[x==max(x)]})
sapply(c(1,2,3),function(x){sum(a2==x)})
a1=cbind(rnorm(nn,mean=100,sd=10),rep(100,nn))
a2=apply(a1,1,function(x){c(1:2)[x==max(x)]})
sapply(c(1,2),function(x){sum(a2==x)})
nn=10000
a1=cbind(rnorm(nn,mean=100,sd=10),rnorm(nn,mean=100,sd=2),rep(100,nn))
a2=apply(a1,1,function(x){c(1:3)[x==max(x)]})
sapply(c(1,2,3),function(x){sum(a2==x)})/nn
a1=cbind(rnorm(nn,mean=100,sd=10),rep(100,nn))
a2=apply(a1,1,function(x){c(1:2)[x==max(x)]})
sapply(c(1,2),function(x){sum(a2==x)})/nn
# Different variances
nn=10000
a1=cbind(rnorm(nn,mean=100,sd=20),rnorm(nn,mean=100,sd=2),rep(100,nn))
a2=apply(a1,1,function(x){c(1:3)[x==max(x)]})
sapply(c(1,2,3),function(x){sum(a2==x)})/nn
a1=cbind(rnorm(nn,mean=100,sd=10),rep(100,nn))
a2=apply(a1,1,function(x){c(1:2)[x==max(x)]})
sapply(c(1,2),function(x){sum(a2==x)})/nn
# Different variances
nn=100000
a1=cbind(rnorm(nn,mean=100,sd=20),rnorm(nn,mean=100,sd=2),rep(100,nn))
a2=apply(a1,1,function(x){c(1:3)[x==max(x)]})
sapply(c(1,2,3),function(x){sum(a2==x)})/nn
a1=cbind(rnorm(nn,mean=100,sd=10),rep(100,nn))
a2=apply(a1,1,function(x){c(1:2)[x==max(x)]})
sapply(c(1,2),function(x){sum(a2==x)})/nn
# Different variances
nn=100000
a1=cbind(rnorm(nn,mean=100,sd=10),rnorm(nn,mean=100,sd=2),rep(100,nn))
a2=apply(a1,1,function(x){c(1:3)[x==max(x)]})
sapply(c(1,2,3),function(x){sum(a2==x)})/nn
a1=cbind(rnorm(nn,mean=100,sd=10),rep(100,nn))
a2=apply(a1,1,function(x){c(1:2)[x==max(x)]})
sapply(c(1,2),function(x){sum(a2==x)})/nn
# Different variances
nn=100000
a1=cbind(rnorm(nn,mean=100,sd=10),rnorm(nn,mean=100,sd=2),rep(100,nn))
a2=apply(a1,1,function(x){c(1:3)[x==max(x)]})
sapply(c(1,2,3),function(x){sum(a2==x)})/nn
a1=cbind(rnorm(nn,mean=100,sd=10),rep(100,nn))
a2=apply(a1,1,function(x){c(1:2)[x==max(x)]})
sapply(c(1,2),function(x){sum(a2==x)})/nn
# Different variances
nn=100000
a1=cbind(rnorm(nn,mean=100,sd=10),rnorm(nn,mean=100,sd=2),rep(100,nn))
a2=apply(a1,1,function(x){c(1:3)[x==max(x)]})
sapply(c(1,2,3),function(x){sum(a2==x)})/nn
a1=cbind(rnorm(nn,mean=100,sd=10),rep(100,nn))
a2=apply(a1,1,function(x){c(1:2)[x==max(x)]})
sapply(c(1,2),function(x){sum(a2==x)})/nn
# Different variances
nn=100000
a1=cbind(rnorm(nn,mean=100,sd=10),rnorm(nn,mean=100,sd=0.00001),rep(100,nn))
a2=apply(a1,1,function(x){c(1:3)[x==max(x)]})
sapply(c(1,2,3),function(x){sum(a2==x)})/nn
a1=cbind(rnorm(nn,mean=100,sd=10),rep(100,nn))
a2=apply(a1,1,function(x){c(1:2)[x==max(x)]})
sapply(c(1,2),function(x){sum(a2==x)})/nn
# Different variances
nn=100000
a1=cbind(rnorm(nn,mean=100,sd=10),rnorm(nn,mean=100,sd=2),rep(100,nn))
a2=apply(a1,1,function(x){c(1:3)[x==max(x)]})
sapply(c(1,2,3),function(x){sum(a2==x)})/nn
a1=cbind(rnorm(nn,mean=100,sd=10),rep(100,nn))
a2=apply(a1,1,function(x){c(1:2)[x==max(x)]})
sapply(c(1,2),function(x){sum(a2==x)})/nn
hist(rnorm(nn,mean=100,sd=2))
hist(rnorm(nn,mean=100,sd=10))
# Different variances
nn=100000
a1=cbind(rnorm(nn,mean=100,sd=10),rnorm(nn,mean=100,sd=2),rep(100,nn))
a2=apply(a1,1,function(x){c(1:3)[x==max(x)]})
sapply(c(1,2,3),function(x){sum(a2==x)})/nn
a1=cbind(rnorm(nn,mean=100,sd=10),rep(100,nn))
a2=apply(a1,1,function(x){c(1:2)[x==max(x)]})
sapply(c(1,2),function(x){sum(a2==x)})/nn
# Different variances
nn=100000
a1=cbind(rnorm(nn,mean=100,sd=10),rnorm(nn,mean=100,sd=2),rep(100,nn))
a2=apply(a1,1,function(x){c(1:3)[x==max(x)]})
sapply(c(1,2,3),function(x){sum(a2==x)})/nn
a1=cbind(rnorm(nn,mean=100,sd=10),rep(100,nn))
a2=apply(a1,1,function(x){c(1:2)[x==max(x)]})
sapply(c(1,2),function(x){sum(a2==x)})/nn
# Different variances
nn=100000
a1=cbind(rnorm(nn,mean=100,sd=10),rnorm(nn,mean=100,sd=3),rep(100,nn))
a2=apply(a1,1,function(x){c(1:3)[x==max(x)]})
sapply(c(1,2,3),function(x){sum(a2==x)})/nn
a1=cbind(rnorm(nn,mean=100,sd=10),rep(100,nn))
a2=apply(a1,1,function(x){c(1:2)[x==max(x)]})
sapply(c(1,2),function(x){sum(a2==x)})/nn
install.packages("xlsx")
# Hep E Maban modelling analysis
# Author: AJ Kucharski (2016-)
# Load weekly cases
case.data <- data.frame(read.csv("~/Documents/Hep_E_data_raw/Maban\ data/HepE_cases_310114.csv",stringsAsFactors = F))
# Load population sizes
pop.data <- data.frame(read.csv("~/Documents/Hep_E_data_raw/Maban\ data/MabanPop_A.csv",stringsAsFactors = F))
pop.data=pop.data[-c(1:71),]
case.data=case.data[1:length(pop.data$Epi.week),]
as.Date("2012-01-01") + (20 + 40)*7
as.Date("2012-01-01") +39*7
# Plot timeseries
par(mfrow=c(1,2))
plot(case.data$Jamam_cases,type="l",ylim=c(0,200))
lines(case.data$Gendrassa_cases,type="l",col="green")
lines(case.data$Batil_cases,type="l",col="red")
lines(case.data$Kaya_cases,type="l",col="blue")
lines(case.data$Doro_cases,type="l",col="orange")
plot(case.data$Jamam_cases/(pop.data$Jpop),type="l",ylim=c(0,0.02))
lines(case.data$Gendrassa_cases/(pop.data$Gpop),type="l",col="green")
lines(case.data$Batil_cases/(pop.data$Bpop),type="l",col="red")
lines(case.data$Kaya_cases/(pop.data$Kpop),type="l",col="blue")
lines(case.data$Doro_cases/(pop.data$Dpop),type="l",col="orange")
dev.off()
# Hep E Maban modelling analysis
# Author: AJ Kucharski (2016-)
# Load weekly cases
case.data <- data.frame(read.csv("~/Documents/Hep_E_data_raw/Maban\ data/HepE_cases_310114.csv",stringsAsFactors = F))
# Load population sizes
pop.data <- data.frame(read.csv("~/Documents/Hep_E_data_raw/Maban\ data/MabanPop_A.csv",stringsAsFactors = F))
pop.data=pop.data[-c(1:71),]
case.data=case.data[1:length(pop.data$Epi.week),]
as.Date("2012-01-01") + (20 + 40)*7
as.Date("2012-01-01") +39*7
# Plot timeseries
par(mfrow=c(1,2))
plot(case.data$Jamam_cases,type="l",ylim=c(0,200))
lines(case.data$Gendrassa_cases,type="l",col="green")
lines(case.data$Batil_cases,type="l",col="red")
lines(case.data$Kaya_cases,type="l",col="blue")
lines(case.data$Doro_cases,type="l",col="orange")
plot(case.data$Jamam_cases/(pop.data$Jpop),type="l",ylim=c(0,0.02))
lines(case.data$Gendrassa_cases/(pop.data$Gpop),type="l",col="green")
lines(case.data$Batil_cases/(pop.data$Bpop),type="l",col="red")
lines(case.data$Kaya_cases/(pop.data$Kpop),type="l",col="blue")
lines(case.data$Doro_cases/(pop.data$Dpop),type="l",col="orange")
# Hep E Maban modelling analysis
# Author: AJ Kucharski (2016-)
# Load weekly cases
case.data <- data.frame(read.csv("~/Documents/Hep_E_data_raw/Maban\ data/HepE_cases_310114.csv",stringsAsFactors = F))
# Load population sizes
pop.data <- data.frame(read.csv("~/Documents/Hep_E_data_raw/Maban\ data/MabanPop_A.csv",stringsAsFactors = F))
pop.data=pop.data[-c(1:71),]
case.data=case.data[1:length(pop.data$Epi.week),]
as.Date("2012-01-01") + (20 + 40)*7
as.Date("2012-01-01") +39*7
# Plot timeseries
par(mfrow=c(1,2))
plot(case.data$Jamam_cases,type="l",ylim=c(0,200))
lines(case.data$Gendrassa_cases,type="l",col="green")
lines(case.data$Batil_cases,type="l",col="red")
lines(case.data$Kaya_cases,type="l",col="blue")
lines(case.data$Doro_cases,type="l",col="orange")
plot(case.data$Jamam_cases/(pop.data$Jpop),type="l",ylim=c(0,0.02))
lines(case.data$Gendrassa_cases/(pop.data$Gpop),type="l",col="green")
lines(case.data$Batil_cases/(pop.data$Bpop),type="l",col="red")
lines(case.data$Kaya_cases/(pop.data$Kpop),type="l",col="blue")
lines(case.data$Doro_cases/(pop.data$Dpop),type="l",col="orange")
plot.new()
# Hep E Maban modelling analysis
# Author: AJ Kucharski (2016-)
# Load weekly cases
case.data <- data.frame(read.csv("~/Documents/Hep_E_data_raw/Maban\ data/HepE_cases_310114.csv",stringsAsFactors = F))
# Load population sizes
pop.data <- data.frame(read.csv("~/Documents/Hep_E_data_raw/Maban\ data/MabanPop_A.csv",stringsAsFactors = F))
pop.data=pop.data[-c(1:71),]
case.data=case.data[1:length(pop.data$Epi.week),]
as.Date("2012-01-01") + (20 + 40)*7
as.Date("2012-01-01") +39*7
# Plot timeseries
par(mfrow=c(1,2))
plot(case.data$Jamam_cases,type="l",ylim=c(0,200))
lines(case.data$Gendrassa_cases,type="l",col="green")
lines(case.data$Batil_cases,type="l",col="red")
lines(case.data$Kaya_cases,type="l",col="blue")
lines(case.data$Doro_cases,type="l",col="orange")
plot(case.data$Jamam_cases/(pop.data$Jpop),type="l",ylim=c(0,0.02))
lines(case.data$Gendrassa_cases/(pop.data$Gpop),type="l",col="green")
lines(case.data$Batil_cases/(pop.data$Bpop),type="l",col="red")
lines(case.data$Kaya_cases/(pop.data$Kpop),type="l",col="blue")
lines(case.data$Doro_cases/(pop.data$Dpop),type="l",col="orange")
dev.off()
dev.off()
dev.off()
# Hep E Maban modelling analysis
# Author: AJ Kucharski (2016-)
# Load weekly cases
case.data <- data.frame(read.csv("~/Documents/Hep_E_data_raw/Maban\ data/HepE_cases_310114.csv",stringsAsFactors = F))
# Load population sizes
pop.data <- data.frame(read.csv("~/Documents/Hep_E_data_raw/Maban\ data/MabanPop_A.csv",stringsAsFactors = F))
pop.data=pop.data[-c(1:71),]
case.data=case.data[1:length(pop.data$Epi.week),]
as.Date("2012-01-01") + (20 + 40)*7
as.Date("2012-01-01") +39*7
# Plot timeseries
par(mfrow=c(1,2))
plot(case.data$Jamam_cases,type="l",ylim=c(0,200))
lines(case.data$Gendrassa_cases,type="l",col="green")
lines(case.data$Batil_cases,type="l",col="red")
lines(case.data$Kaya_cases,type="l",col="blue")
lines(case.data$Doro_cases,type="l",col="orange")
plot(case.data$Jamam_cases/(pop.data$Jpop),type="l",ylim=c(0,0.02))
lines(case.data$Gendrassa_cases/(pop.data$Gpop),type="l",col="green")
lines(case.data$Batil_cases/(pop.data$Bpop),type="l",col="red")
lines(case.data$Kaya_cases/(pop.data$Kpop),type="l",col="blue")
lines(case.data$Doro_cases/(pop.data$Dpop),type="l",col="orange")
plot(c(1:3))
# Hep E Maban modelling analysis
# Author: AJ Kucharski (2016-)
# Load weekly cases
case.data <- data.frame(read.csv("~/Documents/Hep_E_data_raw/Maban\ data/HepE_cases_310114.csv",stringsAsFactors = F))
# Load population sizes
pop.data <- data.frame(read.csv("~/Documents/Hep_E_data_raw/Maban\ data/MabanPop_A.csv",stringsAsFactors = F))
pop.data=pop.data[-c(1:71),]
case.data=case.data[1:length(pop.data$Epi.week),]
as.Date("2012-01-01") + (20 + 40)*7
as.Date("2012-01-01") +39*7
# Plot timeseries
par(mfrow=c(1,2))
plot(case.data$Jamam_cases,type="l",ylim=c(0,200))
lines(case.data$Gendrassa_cases,type="l",col="green")
lines(case.data$Batil_cases,type="l",col="red")
lines(case.data$Kaya_cases,type="l",col="blue")
lines(case.data$Doro_cases,type="l",col="orange")
plot(case.data$Jamam_cases/(pop.data$Jpop),type="l",ylim=c(0,0.02))
lines(case.data$Gendrassa_cases/(pop.data$Gpop),type="l",col="green")
lines(case.data$Batil_cases/(pop.data$Bpop),type="l",col="red")
lines(case.data$Kaya_cases/(pop.data$Kpop),type="l",col="blue")
lines(case.data$Doro_cases/(pop.data$Dpop),type="l",col="orange")
rpois(1000)
rpois
rpois(1000,lambda=10)
# Check neg bin issue
tab.1 <- NULL
for(ii in 1:10){
tab.1 <- c(tab.1, sum(rpois(1000,lambda=10) ))
}
tab.1
# Check neg bin issue
tab.1 <- NULL
years <- 1000
for(ii in 1:10){
tab.1 <- c(tab.1, sum(rpois(1000,lambda=10))/years)
}
tab.1
# Check neg bin issue
tab.1 <- NULL
years <- 1000
for(ii in 1:10){
tab.1 <- c(tab.1, (rpois(1000,lambda=10)))
}
tab.1
# Estimate R0 for Zika based on week long infectiousness
# Author: AJ Kucharski (2016)
# Number of partners in past year (Data from Natsal - Table 4, http://dx.doi.org/10.1016/S0140-6736(13)62035-8)
partners.year <- c(mean=1.5,var=2.7^2) # reported by women
norm <- 1/(74-16)
partners.year <- c(mean=14.1*norm,var=69.6^2*norm^2) # reported by women
#partners.year <- c(mean=1.3,var=3.5^2) # reported by men
sc.week <- 52
partners.week <- c(mean=partners.year[["mean"]]/sc.week,var=partners.year[["var"]]/(sc.week^2))
# Duration and probability of infection per contact
duration <- 1
beta <- 1
cc <- partners.year[["mean"]]
sigma2 <- partners.year[["var"]]
r0 <- beta*cc*duration
r0.var <- beta*(cc+sigma2/cc)*duration
# Summary of R0 with and without variance correction
c(r0,r0.var)
sigma2
tab.1 <- NULL
years <- 1000
for(ii in 1:10){
tab.1 <- c(tab.1, sum(rpois(1000,lambda=10)))
}
tab.1
# Check neg bin issue
tab.1 <- NULL
years <- 1000
for(ii in 1:10){
tab.1 <- c(tab.1, sum(rpois(1000,lambda=10)))
}
var(tab.1)
# Check neg bin issue
tab.1 <- NULL
years <- 10000
for(ii in 1:10){
tab.1 <- c(tab.1, sum(rpois(1000,lambda=10)))
}
var(tab.1)
# Check neg bin issue
tab.1 <- NULL
years <- 10000
for(ii in 1:10){
tab.1 <- c(tab.1, sum(rpois(1000,lambda=10))/years)
}
var(tab.1)
# Check neg bin issue
tab.1 <- NULL
years <- 10
for(ii in 1:10){
tab.1 <- c(tab.1, sum(rpois(1000,lambda=10))/years)
}
var(tab.1)
# Check neg bin issue
tab.1 <- NULL
years <- 100
for(ii in 1:10){
tab.1 <- c(tab.1, sum(rpois(1000,lambda=10))/years)
}
var(tab.1)
# Check neg bin issue
tab.1 <- NULL
years <- 100
for(ii in 1:10){
tab.1 <- c(tab.1, sum(rpois(1000,lambda=10))/years)
}
var(tab.1)
# Check neg bin issue
tab.1 <- NULL
years <- 1000
for(ii in 1:10){
tab.1 <- c(tab.1, sum(rpois(1000,lambda=10))/years)
}
var(tab.1)
# Model of serological dynamics - uses PLOS Biology model (Kucharski et al. 2015)
# Author: AJ Kucharski (2015)
setwd("~/Documents/flu-model/sero_model/")
# setwd("~/Dropbox/git/flu-model/sero_model")
library(reshape2)
library(mvtnorm)
library(MASS)
library(coda)
library(RColorBrewer)
library(foreach)
library(doMC)
registerDoMC(4)  #change the 2 to your number of CPU cores
getDoParWorkers()
rm(list=ls(all=TRUE))
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Load data and functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#source("load_data.R") # Reformat HaNam data and save to file
# make_fluscape_rdata(pathfssvn="~/fluscape/trunk/") # Reformat Flu B data and save to file
source("sero_functions.R")
source("posterior_analysis_flu.R")
source("sero_funcs_steven.r") # Load Flu B format
compile.c() # Compile c code
flutype0="H1"
if(flutype0=="H3"){ dy1=c(2007:2012) }
if(flutype0=="B"){ dy1=c(2011,2012) }
if(flutype0=="H1"){ dy1=c(2009:2011) }
plot.posteriors(year_test=dy1,loadseed=kk,flu.type=flutype0,f.lim=T,plotmap = F)
kk=1
plot.posteriors(year_test=dy1,loadseed=kk,flu.type=flutype0,f.lim=T,plotmap = F)
plot.posterior.titres(loadseed=1,flu.type="H1",simDat=F,year_test=c(2009:2011),btstrap=2)
