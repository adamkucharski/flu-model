}
titreL = apply(storetitreL,2,function(x){c.nume(x)})
#titreM = apply(storetitreM,2,function(x){c.nume(x)})
titreS = apply(storetitreS,2,function(x){c.nume(x)})
titreCrossL = apply(storetitreCrossL,2,function(x){c.nume(x)})
#titreCrossM = apply(storetitreCrossM,2,function(x){c.nume(x)})
titreCrossS = apply(storetitreCrossS,2,function(x){c.nume(x)})
col1P=rgb(0,0,0.8) # rgb(0,0.5,0)
col1=rgb(0,0,0.8,0.005) # rgb(0,0.5,0,0.03)
col1a=rgb(0,0,0.8,0.1) # rgb(0,0.5,0,0.03)
col2P=rgb(0,0,1)
col2=rgb(0,0,1,0.2)
col3P=rgb(1,0,0.5)
col3=rgb(1,0,0.2,0.2)
pois.gen <- function(x,rep){rpois(rep,lambda = x)} # Function to generate random samples
# - - - - - - - - - - - - - - - - - - - - - -
# PLOT PARAMETERS FIGURE 3
# 1. Plot titre waning
par(mfrow=c(1,2)); par(mar = c(3,3,1,1))
par(mgp=c(1.8,0.6,0))
plot(year_x,titreS[1,],ylim=c(-0.1,8.5),type="l",ylab="log titre",xlab="years since infection",col=NULL,xaxs="i",yaxs="i")
polygon(c(year_x,rev(year_x)),c(titreS[2,],rev(titreS[3,])),col=col1a,lty=0)
for(ii in 1:length(year_x2)){
titreSsim = pois.gen(storetitreS[,(ii-1)*sampleX+1],btstrap) # Simulate from Poisson - sample fewer than previous
tstore=data.frame(table(titreSsim),stringsAsFactors = F)
t.alpha=tstore$Freq/btstrap
points(rep(year_x2[ii],length(tstore$titreSsim)),as.numeric(levels(tstore$titreSsim))[tstore$titreSsim],col=rgb(0,0,0.8,t.alpha),pch=19,cex=0.5)
}
lines(year_x,titreS[1,],col=col1P ,lwd = 2)
title(main=LETTERS[1],adj=0)
# 2. Plot cross reaction
par(mar = c(3,2,1,1))
plot(cross_x,titreCrossS[1,],ylim=c(-0.1,8.5),type="l",ylab="",xlab="antigenic distance",col=NULL,xaxs="i",yaxs="i")
polygon(c(cross_x,rev(cross_x)),c(titreCrossS[2,],rev(titreCrossS[3,])),col=col1a,lty=0)
#polygon(c(cross_x,rev(cross_x)),c(titreCrossM[2,],rev(titreCrossM[3,])),col=col2,lty=0)
polygon(c(cross_x,rev(cross_x)),c(titreCrossL[2,],rev(titreCrossL[3,])),col=col3,lty=0)
for(ii in 1:length(cross_x2)){
titreSsim = pois.gen(storetitreCrossS[,(ii-1)*sampleX+1],btstrap) # Simulate from Poisson - sample fewer than previous
tstore=data.frame(table(titreSsim),stringsAsFactors = F) ; t.alpha=tstore$Freq/btstrap
points(rep(cross_x2[ii],length(tstore$titreSsim)),as.numeric(levels(tstore$titreSsim))[tstore$titreSsim],col=rgb(0,0,0.8,t.alpha),pch=19,cex=0.5)
titreSsim = pois.gen(storetitreCrossL[,(ii-1)*sampleX+1],btstrap)
tstore=data.frame(table(titreSsim),stringsAsFactors = F) ; t.alpha=tstore$Freq/btstrap
points(rep(cross_x2[ii],length(tstore$titreSsim)),as.numeric(levels(tstore$titreSsim))[tstore$titreSsim],col=rgb(1,0,0.5,t.alpha),pch=19,cex=0.5)
}
lines(cross_x,titreCrossS[1,],col=col1P,lwd = 2)
#lines(cross_x,titreCrossM[1,],col=col2P)
lines(cross_x,titreCrossL[1,],col=col3P)
title(main=LETTERS[2],adj=0)
dev.copy(pdf,paste("plot_simulations/parameters",loadseed,".pdf",sep=""),width=7,height=4)
dev.off()
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Rewind history and reconstruct antibody landscape for Figure 2
run.historical.landscapes<-function(loadseed=1,year_test=c(2007:2012),linearFn=F,flu.type="H3HN",simDat=F,btstrap=5,n_partSim=2,simTest.year=c(1968:2010),d.step=0.5,ymax=5){
# btstrap=50 ; n_partSim=2 ; simTest.year=c(1968:2010) ; d.step = 0.5 ; flu.type="H3HN"; year_test=c(2007:2012); loadseed = 1; linearFn=T; ymax=5
load("R_datasets/HaNam_data.RData")
loadseed=paste(loadseed,"_",flu.type,sep="")
load(paste("posterior_sero_runs/outputR_f",paste(year_test,"_",collapse="",sep=""),"s",loadseed,"_lin",linearFn,".RData",sep="")) # Note that this includes test.listPost
lik.tot=rowSums(likelihoodtab)
runsPOST=length(lik.tot[lik.tot!=-Inf])
runs1=ceiling(0.2*runsPOST)
thetaT=as.data.frame(thetatab)[runs1:runsPOST,]
# Read in antigenic map data and specify test strains
ag.coord=read.csv("datasets/antigenic_coords.csv", as.is=T,head=T)
strain_names=ag.coord$viruses
x.range <- seq(floor(min(ag.coord$AG_x))-2,ceiling(max(ag.coord$AG_x))+1,d.step)
y.range <- seq(floor(min(ag.coord$AG_y))-2,ceiling(max(ag.coord$AG_y)),d.step)
points.j <- expand.grid(x.range,y.range) # Define list of points to evaluate
xx=scalemap(inf_years,inf_years)
yy=predict(am.spl,xx)$y
# Set up matrices to store -- need btstrap >1
strain_years=inf_years # look at strains from every year
n.strains=length(strain_years) # this loads from main_model.R
n.inf=length(inf_years)
pick_years = c(1,21) #c(1,31)
hist.sample0=rep(c(rep(0,pick_years[1]-1),1,rep(0,pick_years[2]-1)),100)[1:n.inf] # CURRENTLY JUST FOR ONE PARTICIPANT
simTest.year=sort(c(inf_years[hist.sample0==1],inf_years[hist.sample0==1]+1)) # infection year and one year after
n.test=length(simTest.year)
# Set up sample sapce
sampleX = 10
# 1D plots
# Store bootstrap runs
storetitreS1 <- rep(NA,nrow=length(points.j[,1]))
storetitreL1 <- rep(NA,length(points.j[,1]))
storetitreS2 <- rep(NA,length(points.j[,1]))
storetitreL2 <- rep(NA,length(points.j[,1]))
storetitreS3 <- rep(NA,length(points.j[,1]))
#storetitreL3 <- rep(NA,length(points.j[,1]))
right.censor <- function(x){min(8, x)}
pickA <- (lik.tot==max(lik.tot)) # pick MAP estimate #sample(c(runs1:runsPOST),1)
theta.max <- head(as.data.frame(thetatab)[pickA,],1)
# Iterate across whole sample sapce
for(sampk in 1:length(points.j[,1])){
year_x=pick_years[2]-pick_years[1]
# Need to add AGS
cross_x1 = sqrt( sum((as.numeric(points.j[sampk,]) - c(yy[pick_years[1]],xx[pick_years[1]]) )^2 ) ) # calculate 2D distance - note xx,yy switch
cross_x2 = sqrt( sum((as.numeric(points.j[sampk,]) - c(yy[pick_years[2]],xx[pick_years[2]]) )^2 ) ) # calculate 2D distance
# Need to edit the linear function here
if(linearFn==F){
storetitreS1[sampk] = (theta.max$mu*exp(-theta.max$sigma*cross_x1) + theta.max$muShort*exp(- 0 * theta.max$wane)*exp(-theta.max$sigma2*cross_x1) ) %>% right.censor()
storetitreL1[sampk] = ( theta.max$mu*exp(-theta.max$sigma*cross_x1) + theta.max$muShort*exp(- (1) * theta.max$wane)*exp(-theta.max$sigma2*cross_x1) )%>% right.censor()
storetitreS2[sampk] = ( (1+theta.max$tau1)*(theta.max$mu*exp(-theta.max$sigma*cross_x1) +
theta.max$muShort*exp(- (year_x) * theta.max$wane)*exp(-theta.max$sigma2*cross_x1) ) +
exp(- theta.max$tau2)*(theta.max$mu*exp(-theta.max$sigma*cross_x2) +
theta.max$muShort*exp(- 0 * theta.max$wane)*exp(-theta.max$sigma2*cross_x2) )
) %>% right.censor()
storetitreL2[sampk] = ( (1+theta.max$tau1)*(theta.max$mu*exp(-theta.max$sigma*cross_x1) +
theta.max$muShort*exp(- (year_x+1 ) * theta.max$wane)*exp(-theta.max$sigma2*cross_x1) ) + # Note the year_x +1 here
exp(- theta.max$tau2)*(theta.max$mu*exp(-theta.max$sigma*cross_x2) +
theta.max$muShort*exp(- (1) * theta.max$wane)*exp(-theta.max$sigma2*cross_x2) )
) %>% right.censor()
}else{
storetitreS1[sampk] = (theta.max$mu*max(0,1-theta.max$sigma*cross_x1) + theta.max$muShort*max(0,1- 0 * theta.max$wane)*max(0,1-theta.max$sigma2*cross_x1) ) %>% right.censor()
storetitreL1[sampk] = ( theta.max$mu*max(0,1-theta.max$sigma*cross_x1) + theta.max$muShort*max(0,1 - (1) * theta.max$wane)*max(0,1-theta.max$sigma2*cross_x1) )%>% right.censor()
storetitreS2[sampk] = ( (1+theta.max$tau1)*(theta.max$mu*max(0,1-theta.max$sigma*cross_x1) +
theta.max$muShort*max(0,1- (year_x) * theta.max$wane)*(1-theta.max$sigma2*cross_x1) ) +
max(0,1- theta.max$tau2)*(theta.max$mu*max(0,1-theta.max$sigma*cross_x2) +
theta.max$muShort*max(0,1- 0 * theta.max$wane)*(1-theta.max$sigma2*cross_x2) )
) %>% right.censor()
storetitreL2[sampk] = ( (1+theta.max$tau1)*(theta.max$mu*max(0,1-theta.max$sigma*cross_x1) +
theta.max$muShort*max(0,1- (year_x+1 ) * theta.max$wane)*max(0,1-theta.max$sigma2*cross_x1) ) + # Note the year_x +1 here
max(0,1- theta.max$tau2)*(theta.max$mu*max(0,1-theta.max$sigma*cross_x2) +
theta.max$muShort*max(0,1- (1) * theta.max$wane)*max(0,1-theta.max$sigma2*cross_x2) )
) %>% right.censor()
}
}
# PLOT FIGURES
col1P=rgb(0,0,0.8) # rgb(0,0.5,0)
pred_matrixS1 <- matrix(storetitreS1,byrow=F,nrow=length(x.range))
pred_matrixL1 <- matrix(storetitreL1,byrow=F,nrow=length(x.range))
pred_matrixS2 <- matrix(storetitreS2,byrow=F,nrow=length(x.range))
pred_matrixL2 <- matrix(storetitreL2,byrow=F,nrow=length(x.range))
# Calculate titres along summary path
predOutput <- function(matrixA){apply(cbind(xx,yy),1,function(zz){ ydist=abs(y.range-zz[1]); xdist=abs(x.range-zz[2]); matrixA[xdist==min(xdist),ydist==min(ydist)] })}
# Define list of isolate years
sY <- strain_years_convert()
# Plot panels and antigenic summary paths
layout(matrix(c(rep(1,3),rep(2,3),rep(1,3),rep(2,3),rep(1,3),rep(2,3),
rep(3,3),rep(4,3),
rep(5,3),rep(6,3),rep(5,3),rep(6,3),rep(5,3),rep(6,3),
rep(7,3),rep(8,3)
), 8,6, byrow=T) )
par(mgp=c(1.8,0.6,0))
tranP <- 1; sizP <- 0.9 ; grY <- 0.6
par(mar = c(4,4,2,2))
image2D(z = t(pred_matrixS1), x = y.range, y = x.range, xlab="antigenic dimension 1", ylab="antigenic dimension 2", zlim = c(0, ymax),
main=inf_years[pick_years[1] ],col=rev(ramp.col (col = c("blue",rgb(0.4,0.6,1),"white"), n = 100, alpha = 1))) #paste("Landscape ",Data.load, ". Age ", group.names[kk],sep="")
points(ag.coord[sY <= (pick_years[1] + 1968 -1),c("AG_y","AG_x")],pch=19,col=rgb(0,0,0,tranP))
points(ag.coord[sY > (pick_years[1] + 1968 -1),c("AG_y","AG_x")],pch=19,col=rgb(grY,grY,grY,tranP))
lines(xx,yy,col="black",lty=2)
points(x=xx[pick_years[1]],y=yy[pick_years[1]],cex=1.5, col="red", lwd=2)
title(main=LETTERS[1],adj=0)
par(mar = c(4,4,2,2))
image2D(z = t(pred_matrixL1), x = y.range, y = x.range, xlab="antigenic dimension 1", ylab="antigenic dimension 2", zlim = c(0, ymax),
main=inf_years[pick_years[1] ]+1,col=rev(ramp.col (col = c("blue",rgb(0.4,0.6,1),"white"), n = 100, alpha = 1))) #paste("Landscape ",Data.load, ". Age ", group.names[kk],sep="")
points(ag.coord[sY <= (pick_years[1] + 1968 ),c("AG_y","AG_x")],pch=19,col=rgb(0,0,0,tranP))
points(ag.coord[sY > (pick_years[1] + 1968 ),c("AG_y","AG_x")],pch=19,col=rgb(grY,grY,grY,tranP))
lines(xx,yy,col="black",lty=2)
points(x=xx[pick_years[1]],y=yy[pick_years[1]],cex=1.5, col="red", lwd=2)
title(main=LETTERS[3],adj=0)
infcol="red"
# Project along summary path
par(mar = c(2,4,1,2))
plot(inf_years,predOutput(pred_matrixS1),type="l",col="blue",ylim=c(0,ymax),ylab="log titre",xlab="",yaxs="i", lwd=2) # Need to include uncertainty?
lines(c(inf_years[pick_years[1] ],inf_years[pick_years[1] ]),c(0,ymax),lwd=2,col=infcol)
title(main=LETTERS[2],adj=0)
plot(inf_years,predOutput(pred_matrixL1),type="l",col="blue",ylim=c(0,ymax),ylab="log titre",xlab="",yaxs="i", lwd=2) # Need to include uncertainty?
lines(c(inf_years[pick_years[1] ],inf_years[pick_years[1] ]),c(0,ymax),lwd=2,col=infcol)
title(main=LETTERS[4],adj=0)
par(mar = c(4,4,2,2))
image2D(z = t(pred_matrixS2), x = y.range, y = x.range, xlab="antigenic dimension 1", ylab="antigenic dimension 2", zlim = c(0, ymax),
main=inf_years[pick_years[2] ],col=rev(ramp.col (col = c("blue",rgb(0.4,0.6,1),"white"), n = 100, alpha = 1))) #paste("Landscape ",Data.load, ". Age ", group.names[kk],sep="")
points(ag.coord[sY <= (pick_years[2] + 1968 -1),c("AG_y","AG_x")],pch=19,col=rgb(0,0,0,tranP))
points(ag.coord[sY > (pick_years[2] + 1968 -1),c("AG_y","AG_x")],pch=19,col=rgb(grY,grY,grY,tranP))
lines(xx,yy,col="black",lty=2)
points(x=c(xx[pick_years[1]],xx[pick_years[2]]),y=c(yy[pick_years[1]],yy[pick_years[2]]),cex=1.5, col="red", lwd=2)
title(main=LETTERS[5],adj=0)
par(mar = c(4,4,2,2))
image2D(z = t(pred_matrixL2), x = y.range, y = x.range, xlab="antigenic dimension 1", ylab="antigenic dimension 2", zlim = c(0, ymax),
main=inf_years[pick_years[2] ]+1,col=rev(ramp.col (col = c("blue",rgb(0.4,0.6,1),"white"), n = 100, alpha = 1))) #paste("Landscape ",Data.load, ". Age ", group.names[kk],sep="")
points(ag.coord[sY <= (pick_years[2] + 1968 ),c("AG_y","AG_x")],pch=19,col=rgb(0,0,0,tranP))
points(ag.coord[sY > (pick_years[2] + 1968 ),c("AG_y","AG_x")],pch=19,col=rgb(grY,grY,grY,tranP))
lines(xx,yy,col="black",lty=2)
points(x=c(xx[pick_years[1]],xx[pick_years[2]]),y=c(yy[pick_years[1]],yy[pick_years[2]]),cex=1.5, col="red", lwd=2)
title(main=LETTERS[7],adj=0)
# Project along summary path
par(mar = c(2,4,1,2))
plot(inf_years,predOutput(pred_matrixS2),type="l",col="blue",ylim=c(0,ymax),ylab="log titre",xlab="",yaxs="i", lwd=2) # Need to include uncertainty?
lines(c(inf_years[pick_years[1] ],inf_years[pick_years[1] ]),c(0,ymax),lwd=2,col=infcol)
lines(c(inf_years[pick_years[2] ],inf_years[pick_years[2] ]),c(0,ymax),lwd=2,col=infcol)
title(main=LETTERS[6],adj=0)
plot(inf_years,predOutput(pred_matrixL2),type="l",col="blue",ylim=c(0,ymax),ylab="log titre",xlab="",yaxs="i", lwd=2) # Need to include uncertainty?
lines(c(inf_years[pick_years[1] ],inf_years[pick_years[1] ]),c(0,ymax),lwd=2,col=infcol)
lines(c(inf_years[pick_years[2] ],inf_years[pick_years[2] ]),c(0,ymax),lwd=2,col=infcol)
title(main=LETTERS[8],adj=0)
dev.copy(pdf,paste("plot_simulations/simulate_new_response/map_space",loadseed,".pdf",sep=""),width=8,height=7,useDingbats=F)
dev.off()
# 3D Plot
par(mfrow=c(2,2))
par(mar = c(1,0,0.7,2))
par(mgp=c(1.8,0.6,0))
thetaPick=-45
ExpX = 0.6
maxLoc = 0
alphaA = 0.6
sizeA = 0.8
viewPoint = 40
yRange = c(min(x.range),max(x.range)) # Note reverse to make plots neater
xRange = c(min(y.range),max(y.range))
for(kk in 1:4){
if(kk<=2){
straincoord1 = ag.coord[sY <= (pick_years[1] + 1968 ),c("AG_y","AG_x")]
straincoord2 = ag.coord[sY > (pick_years[1] + 1968 ),c("AG_y","AG_x")]
p_year = pick_years[1]
}else{
straincoord1 = ag.coord[sY <= (pick_years[2] + 1968 ),c("AG_y","AG_x")]
straincoord2 = ag.coord[sY > (pick_years[2] + 1968 ),c("AG_y","AG_x")]
p_year = c(pick_years[1],pick_years[2])
}
if(kk==1){pm_plot = pred_matrixS1}
if(kk==2){pm_plot = pred_matrixL1}
if(kk==3){pm_plot = pred_matrixS2}
if(kk==4){pm_plot = pred_matrixL2}
# Plot strains
points3D(straincoord1[,"AG_y"],straincoord1[,"AG_x"],rep(maxLoc,length(straincoord1$AG_y)),zlim=c(0,5),ticktype = "detailed",xlim=xRange,ylim=yRange,xlab="",ylab="",zlab="titre",col = "black", cex = sizeA,pch=19,phi=viewPoint, theta = thetaPick,expand = ExpX)
points3D(straincoord2[,"AG_y"],straincoord2[,"AG_x"],rep(maxLoc,length(straincoord2$AG_y)),  cex = sizeA, add=T,pch=19,col=rgb(grY,grY,grY,tranP))
# Plot summary
lines3D(x=xx,y=yy,rep(maxLoc,length(xx)),col="black",lty=2, add=T)
# Plot infection
scatter3D(x=c(xx[p_year]),y=c(yy[p_year]),z=rep(5,length(p_year)),type="h",lty=2,cex = sizeA, add=T, col="red", lwd=1,pch=19)
# Plot perspective
persp3D(z = t(pm_plot),x = y.range, y = x.range,clim=c(0,5),ticktype = "detailed",add=T,alpha=alphaA)
title(main=LETTERS[kk],adj=0)
}
dev.copy(pdf,paste("plot_simulations/simulate_new_response/map_space2.pdf",sep=""),width=8,height=6)
dev.off()
#dev.copy(png,paste("plot_simulations/simulate_new_response/map_space2e.png",sep=""),units="cm",width=25,height=15,res=150)
#dev.off()
}
# Plot H3N2 Vietnam data
plot_h3_reports <- function(){
par(mfrow=c(3,1))
par(mgp=c(1.8,0.6,0))
par(mar = c(3,3,1,1))
test.yr=c(2007:2012)
collect.list = data.frame(rbind(c(2006,"2005-12-31"),c(2007,"2007-12-31"),c(2008,"2008-12-31"),
c(2009,"2009-06-30"),c(2010,"2010-04-30"), c(2011,"2011-07-31"),c(2012,"2012-05-31") ),stringsAsFactors = F) # Dat of isolation
names(collect.list)=c("year","sample")
collect.list$year=as.numeric(collect.list$year)
collect.list$sample=as.Date(collect.list$sample)
flu.isolates=data.frame(read.csv("datasets/Vietnam_H3.csv",stringsAsFactors = F)) # Data from http://www.who.int/influenza/gisrs_laboratory/flunet/en/
flu.isolates=flu.isolates[flu.isolates$Start_date >= as.Date(collect.list[2,2]), ]
flu.isolates$Start_date=as.Date(flu.isolates$Start_date)
flu.isolates$A_H3[is.na(flu.isolates$A_H3)]=0 # Set blank spaces to zero
# Count samples within region
isolatetab=NULL
for(ii in 2:length(test.yr) ){ # iterate from 2 as don't know initial period of risk
isolatetab=c(isolatetab,
sum(flu.isolates[flu.isolates$Start_date > collect.list[ii,"sample"] & flu.isolates$Start_date < collect.list[ii+1,"sample"] ,"A_H3"])
)
}
xLims=c(as.Date("2007-12-30"),as.Date("2012-06-01"))
plot(flu.isolates$Start_date,flu.isolates$total_flu_positive,type="l",xlab="year",ylab="Total isolates detected",ylim=c(0,100),xlim=xLims);title(LETTERS[1],adj=0)
plot(flu.isolates$Start_date,flu.isolates$A_H3,type="l",xlab="year",ylab="H3 isolates detected",ylim=c(0,100),xlim=xLims);title(LETTERS[2],adj=0)
for(ii in 1:length(collect.list$year)){
lines(c(collect.list[ii,"sample"],collect.list[ii,"sample"]),c(0,100),col="red")
}
# Plot from 3 as want to line up end points
plot(collect.list$sample[3:7], isolatetab,ylim=c(0,800),pch=19,col="red",xlab="year",ylab="H3 isolates detected",xlim=xLims);title(LETTERS[3],adj=0)
dev.copy(pdf,paste("plot_simulations/H3Data.pdf",sep=""),width=6,height=6,useDingbats=F)
dev.off()
}
# Plot H3N2 China data
plot_h3_china_reports <- function(){
par(mfrow=c(2,1))
par(mgp=c(1.8,0.6,0))
par(mar = c(4,4,1,1))
test.yr=c(2004:2009)
#collect.list = data.frame(rbind(c(2006,"2005-12-31"),c(2007,"2007-12-31"),c(2008,"2008-12-31"),
#                                c(2009,"2009-06-30"),c(2010,"2010-04-30"), c(2011,"2011-07-31"),c(2012,"2012-05-31") ),stringsAsFactors = F) # Dat of isolation
collect.list = data.frame(rbind(c(2004,"2004-12-31"),c(2005,"2005-12-31"),c(2006,"2006-12-31"),c(2007,"2007-12-31"),c(2008,"2008-12-31"),
c(2009,"2009-12-31"),c(2010,"2010-12-31"), c(2011,"2011-12-31"),c(2012,"2012-12-31") ),stringsAsFactors = F) # Dat of isolation
names(collect.list)=c("year","sample")
collect.list$year=as.numeric(collect.list$year)
collect.list$sample=as.Date(collect.list$sample)
flu.isolates=data.frame(read.csv("datasets/China_H3.csv",stringsAsFactors = F)) # Data from http://www.who.int/influenza/gisrs_laboratory/flunet/en/
flu.isolates$Start_date=as.Date(flu.isolates$Start_date)
flu.isolates$A_H3[is.na(flu.isolates$A_H3)]=0 # Set blank spaces to zero
# Count samples within region
isolatetab=NULL
for(ii in 2:length(test.yr) ){
isolatetab=c(isolatetab,
sum(flu.isolates[flu.isolates$Start_date > collect.list[ii,"sample"] & flu.isolates$Start_date < collect.list[ii+1,"sample"] ,"A_H3"])
)
}
xLims=c(as.Date("2004-11-01"),as.Date("2009-06-01"))
# plot(flu.isolates$Start_date,flu.isolates$total_flu_positive,type="l",xlab="Date",ylab="Total isolates detected",ylim=c(0,1000),xlim=xLims);title(LETTERS[1],adj=0)
plot(flu.isolates$Start_date,flu.isolates$A_H3,type="l",xlab="Date",ylab="H3 isolates detected",ylim=c(0,2000),xlim=xLims);title(LETTERS[2],adj=0)
for(ii in 1:length(collect.list$year)){
lines(c(collect.list[ii,"sample"],collect.list[ii,"sample"]),c(0,10000),col="red")
}
plot(collect.list$sample[3:7], isolatetab,ylim=c(0,20000),pch=19,col="red",xlab="year",ylab="H3 isolates detected",xlim=xLims);title(LETTERS[3],adj=0)
dev.copy(pdf,paste("plot_simulations/H3Data.pdf",sep=""),width=5,height=7,useDingbats=F)
dev.off()
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run multi-chain diagnostics
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
plot.multi.true.vs.estimated<-function(simDat=T,flu.type="H3HN",loadpick=c(1:4),burnCut=0.25,year_test=c(2007:2012),plotmap=F,fr.lim=F,linearFn=T,runsPOST=NULL){
# simDat=T;year_test=c(2007:2012);plotmap=F;fr.lim=T;flu.type="H3HN"; loadpick=c(1:10); burnCut=0.25; loadseed=1; linearFn=T; runsPOST=NULL
col.list=list(col1=rgb(0.9,0.6,0),col2=rgb(0.2,0,0.8),col3=rgb(0.1,0.6,0.2),col4=rgb(1,0.4,1),col5=rgb(0.8,0,0.2))
# Orange, blue, green, pink
par(mfrow=c(1,1),mar = c(3,3,1,1),mgp=c(1.8,0.6,0))
plot(0.1,0.1,pch=19,col="white",xlim=c(0,0.3),ylim=c(0,0.3),xlab="true attack rate",ylab="estimated attack rate", xaxs="i", yaxs="i")
lines(c(0,1),c(0,1),col='grey')
vals.blank=NULL
for(loadseed in loadpick){
if(simDat==F){loadseedA=paste(loadseed,"_",flu.type,sep="")}else{loadseedA=paste("SIM_",loadseed,sep="")}
load(paste("posterior_sero_runs/outputR_f",paste(year_test,"_",collapse="",sep=""),"s",loadseedA,"_lin",linearFn,".RData",sep=""))
hist.sample=length(historytabCollect[,1])/n_part # need this sample value because table is stacked
ind.infN=rowSums(historytabCollect[((round(0.2*hist.sample)*n_part)+1):(hist.sample*n_part),])
yob.data=cbind(rep(1,n_part),rep(1,n_part)) # Import age distribution
n.alive=n_part+0*inf_years
attack=colSums(historytabCollect[round(0.2*hist.sample*n_part):(hist.sample*n_part),])/(length(ind.infN)*(n.alive/length(yob.data[,1]))) #scale by proportion alive
attackCI=NULL
for(jj in 1:length(inf_years)){
htest <- binom.test(round(n.alive*attack)[jj], n.alive[jj], p = 1,conf.level=0.95)
meanA=attack[jj]
conf1=htest$conf.int[1]
conf2=htest$conf.int[2]
attackCI=rbind(attackCI,c(meanA,conf1,conf2))
}
attackCI=data.frame(attackCI)
names(attackCI)=c("mean","CI1","CI2")
load(paste("R_datasets/Simulated_data_",loadseedA,".RData",sep=""))
attack.yr=colSums(historytabSim)/n_part
# - - - - - - - - - - - - - - - - - -
# Calculate and plot four fold rise in data
sconverttab = NULL
for(kk in 2:(length(test.yr)-1) ){ # Only valid for 2008-2011 (no test strains for 2012)
pyear2=0
pyear4=0
nyear=0
for(ii in 1:n_part){
t.part1=test.listSim[[ii]][[kk-1]]
t.part2=test.listSim[[ii]][[kk]]
# Check to match test strains
matchd1d2 = t.part2[3,]==test.yr[kk]
if(length(matchd1d2) > 0){
diffT = t.part2[2,matchd1d2] - t.part1[2,matchd1d2] # Compare titres
nyear = nyear +1
if(median(diffT) >= 2){pyear4 = pyear4 + 1}
if(median(diffT) >= 1){pyear2 = pyear2 + 1}
}
}
sconverttab=rbind(sconverttab, c(pyear4/nyear,pyear2/nyear))
}
pick_r=match(test_years[2:(length(test.yr)-1)],inf_years)
for(kk in pick_r){ # Iterate across test years
points(attack.yr[kk],attackCI$mean[kk],pch=19,col=rgb(1,0,0),cex=0.5)
lines(c(attack.yr[kk],attack.yr[kk]),c(attackCI$CI1[kk],attackCI$CI2[kk]),col=rgb(1,0,0))
}
points(attack.yr[pick_r], sconverttab[,2],pch=1,cex=1.2,col=rgb(0,0,0))
points(attack.yr[pick_r], sconverttab[,1],pch=19,cex=1.2,col=rgb(0,0,0))
vals.blank = rbind(vals.blank, cbind(attack.yr[pick_r],attackCI$mean[pick_r],sconverttab) )
}
dev.copy(pdf,paste("plot_simulations/True_vs_rise",ifelse(simDat==T,"SIM",""),"_np",n_part,"_yr",paste(year_test,"_",collapse="",sep=""),loadseed,".pdf",sep=""),width=5,height=4)
dev.off()
vals.blank0 = vals.blank %>% data.frame()
names(vals.blank0)=c("true","est","rise4","rise2")
# Plot residuals
breaksN=seq(-0.31,0.31,0.02)
# hist(vals.blank0$est-vals.blank0$true,breaks = breaksN,col=rgb(1,0,0,0.5),border="grey")
# hist(vals.blank0$rise4-vals.blank0$true, breaks = breaksN,add=T,col=rgb(0,0,0,0.2),border=NULL)
# hist(vals.blank0$rise2-vals.blank0$true, breaks = breaksN,add=T,col=rgb(0,1,0,0.2),border=NULL)
#
par(mar=c(3,3,1,1),mgp=c(2,0.7,0))
plot(density(vals.blank0$est-vals.blank0$true),col="white",frame=T,xaxs="i",yaxs="i",ylab="density",xlab="simulation residual",main="",xlim=c(-0.2,0.25),ylim=c(0,80))
lines(c(0,0),c(0,100),col="grey")
lines(density(vals.blank0$est-vals.blank0$true,adjust=2),col="red",lwd=2)
lines(density(vals.blank0$rise4-vals.blank0$true,adjust=1),col="black",lty=1,lwd=2)
lines(density(vals.blank0$rise2-vals.blank0$true,adjust=1),col="black",lty=2,lwd=2)
dev.copy(pdf,paste("plot_simulations/TrueDens",ifelse(simDat==T,"SIM",""),"_np",n_part,"_yr",paste(year_test,"_",collapse="",sep=""),loadseed,".pdf",sep=""), width=3,height=2)
dev.off()
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Histogram of sample strains
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
plot_hist_strains <- function(){
par(mfrow=c(1,1),mar=c(3,3,1,1),mgp=c(1.5,0.5,0))
load("R_datasets/HaNam_data.RData")
hist(strain_years,breaks = seq(1967.5,2011.5,1),col=rgb(0.7,0.7,0.7),
xaxs="i",yaxs="i",border=NULL,main=NULL,xlab="year",ylab="frequency")
dev.copy(pdf,paste("plot_simulations/Sample_years.pdf",sep=""), width=4,height=2)
dev.off()
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Convert map ID tags to strain years
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
strain_years_convert <- function(){
ag.coord=read.csv("datasets/antigenic_coords.csv", as.is=T,head=T)
# Convert antigenic coords into cluster centroids
strain_years=as.numeric(sapply(ag.coord$viruses,function(x){
a1=max(which(strsplit(x, "")[[1]]=="/"))
lstr=nchar(x)
yr1=substr(x, a1+1, lstr)
if(nchar(yr1)>4){yr1=substr(yr1, 1, 4)}
year=yr1
if(nchar(yr1)==2 & as.numeric(yr1)>15){year=paste("19",yr1,sep="")}
if(nchar(yr1)==2 & as.numeric(yr1)<15){year=paste("20",yr1,sep="")}
year
}
))
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Compare posterior infection histories
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
plot_posterior_infection_number <- function(){
postFS = read.csv("plot_simulations/param_post1_H3FS.csv")$x
postFS_HI = read.csv("plot_simulations/param_post2_H3FS_HI.csv")$x
postHN = read.csv("plot_simulations/param_post1_H3HN.csv")$x
pick = min(length(postFS),length(postHN))
print(c.text(postHN[1:pick]-postFS[1:pick]))
pick = min(length(postFS),length(postFS_HI))
print(c.text(postFS[1:pick]-postFS_HI[1:pick]))
# Compare infection histories
postFS = read.csv("plot_simulations/infection_hist1_H3FS.csv")$x
postFS_HI = read.csv("plot_simulations/infection_hist2_H3FS_HI.csv")$x
bindata = seq(-0.5,42.5,1)
par(mfrow=c(1,1),mar=c(3,3,1,1),mgp=c(1.5,0.5,0))
hist(postFS_HI,col=rgb(0,0,1,0.5),xaxs="i",yaxs="i",main=NULL,freq=F,xlab="number of infections",ylim=c(0,0.07),breaks = bindata)
hist(postFS,add=T,col=rgb(1,0,0,0.5),freq=F,breaks = bindata)
dev.copy(pdf,paste("plot_simulations/Infections.pdf",sep=""), width=5,height=3)
dev.off()
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Compare YOB
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
compare_YOB <- function(){
yob.dataHN = read.csv("datasets/HaNam_YOB.csv",header=FALSE)$V1 # Import age distribution HN
yob.dataFS = read.csv("datasets/FluScape_YOB.csv",header=FALSE)$V1 # Import age distribution FS
hist(yob.dataHN,prob=T,col=rgb(0,0,1,0.3),xlab="year of birth",main="Blue = Vietnam, Red = China",yaxs="i",breaks=seq(1920,2010,10))
hist(yob.dataFS,add=T,col=rgb(1,0,0,0.3),prob=T)
dev.copy(pdf,paste("plot_simulations/Age_histogram.pdf",sep=""), width=5,height=4)
dev.off()
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Plot schematic of model outputs
fitted_model_schematic<-function(loadseed=1,year_test=c(2007:2012),linearFn=F,flu.type="H3HN",simDat=F,n_partSim=2,simTest.year=c(1968:2010),d.step=0.5,ymax=5,btstrap=50){
# n_partSim=2 ; simTest.year=c(1968:2010) ; d.step = 0.5 ; flu.type="H3HN"; year_test=c(2007:2012); loadseed = 1; linearFn=T; ymax=5; btstrap = 1e4
load("R_datasets/HaNam_data.RData")
loadseed=paste(loadseed,"_",flu.type,sep="")
load(paste("posterior_sero_runs/outputR_f",paste(year_test,"_",collapse="",sep=""),"s",loadseed,"_lin",linearFn,".RData",sep="")) # Note that this includes test.listPost
lik.tot=rowSums(likelihoodtab)
runsPOST=length(lik.tot[lik.tot!=-Inf])
runs1=ceiling(0.2*runsPOST)
thetaT=as.data.frame(thetatab)[runs1:runsPOST,]
length_t = length(runs1:runsPOST)
pickA <- (lik.tot==max(lik.tot))
theta.max <- head(as.data.frame(thetatab)[pickA,],1)
# Set up plot
time.steps = seq(0,4,0.2)
antigenic.steps = c(0,5,10)
infect.steps = c(0,5,10)
# Iterate across samples to get response to three illustrative viruses
virus_1_sB = NULL; virus_2_sB = NULL; virus_3_sB = NULL
for(ii in 1:btstrap){
pickA = sample(length_t,1)
theta_p = thetaT[pickA,]
virus_1_s = NULL; virus_2_s = NULL; virus_3_s = NULL
for(kk in time.steps){
virus_1 = theta_p[["mu"]] + theta_p[["muShort"]]*max(0,1-theta_p[["wane"]]*max(0,kk-infect.steps[1]))
virus_1 = rnorm(1,mean = virus_1, sd = theta_p[["error"]])
virus_1_s = c(virus_1_s,virus_1)
virus_2 = max(0,1-theta_p[["sigma"]]*antigenic.steps[2]) * theta_p[["mu"]] + max(0,1-theta_p[["sigma2"]]*antigenic.steps[2]) * theta_p[["muShort"]]*max(0,1-theta_p[["wane"]]*(kk-infect.steps[1]))
virus_2 = rnorm(1,mean = virus_2, sd = theta_p[["error"]])
virus_2_s = c(virus_2_s,virus_2)
virus_3 = max(0,1-theta_p[["sigma"]]*antigenic.steps[3]) * theta_p[["mu"]] + max(0,1-theta_p[["sigma2"]]*antigenic.steps[3]) * theta_p[["muShort"]]*max(0,1-theta_p[["wane"]]*(kk-infect.steps[1]))
virus_3 = rnorm(1,mean = virus_3, sd = theta_p[["error"]])
virus_3_s = c(virus_3_s,virus_3)
}
virus_1_sB = rbind(virus_1_sB,virus_1_s); virus_2_sB = rbind(virus_2_sB,virus_2_s); virus_3_sB = rbind(virus_3_sB,virus_3_s)
}
virus_1_CI = apply(virus_1_sB,2,c.nume2)
virus_2_CI = apply(virus_2_sB,2,c.nume2)
virus_3_CI = apply(virus_3_sB,2,c.nume2)
par(mfrow=c(3,1),mar=c(3,3,1,1),mgp=c(1.5,0.5,0))
col.base = rgb(0,0,1,0.2)
col.alpha = rgb(0,0,1,0.2)
plot(time.steps,virus_1_CI[1,],type="l",ylim=c(0,8),yaxs="i",xaxs="i",col="blue",main="Homologous virus",xlab="years since infection",ylab="log titre")
polygon(c(time.steps,rev(time.steps)),c(virus_1_CI[2,],rev(virus_1_CI[3,])),col=col.alpha,lty=0)
polygon(c(time.steps,rev(time.steps)),c(virus_1_CI[4,],rev(virus_1_CI[5,])),col=col.alpha,lty=0)
title(main=LETTERS[1],adj=0)
plot(time.steps,virus_2_CI[1,],type="l",ylim=c(0,8),yaxs="i",xaxs="i",col="blue",main="Difference of 5 antigenic units",xlab="years since infection",ylab="log titre")
polygon(c(time.steps,rev(time.steps)),c(virus_2_CI[2,],rev(virus_2_CI[3,])),col=col.alpha,lty=0)
polygon(c(time.steps,rev(time.steps)),c(virus_2_CI[4,],rev(virus_2_CI[5,])),col=col.alpha,lty=0)
title(main=LETTERS[2],adj=0)
plot(time.steps,virus_3_CI[1,],type="l",ylim=c(0,8),yaxs="i",xaxs="i",col="blue",main="Difference of 10 antigenic units",xlab="years since infection",ylab="log titre")
polygon(c(time.steps,rev(time.steps)),c(virus_3_CI[2,],rev(virus_3_CI[3,])),col=col.alpha,lty=0)
polygon(c(time.steps,rev(time.steps)),c(virus_3_CI[4,],rev(virus_3_CI[5,])),col=col.alpha,lty=0)
title(main=LETTERS[3],adj=0)
dev.copy(pdf,paste("plot_simulations/Response_schematic.pdf",sep=""), width=4,height=8)
dev.off()
}
# - - -
# CONVERGENCE CHECKS
# Plot convergence for MCMC chains for H3 Neut FluScape
plot.multi.chain.posteriors(burnCut=0.25,flu.type="H3FS",year_test=c(2009),loadpick=c(1:4),fr.lim=T,linearFn=T)
# Plot convergence for MCMC chains for H3 HI FluScape
plot.multi.chain.posteriors(burnCut=0.25,flu.type="H3FS_HI",year_test=c(2009),loadpick=c(1:4),fr.lim=T,linearFn=T)
# Plot convergence for MCMC chains for H3 Vietnam
plot.multi.chain.posteriors(burnCut=0.25,flu.type="H3HN",loadpick=c(1:4),fr.lim=F,linearFn=T)
