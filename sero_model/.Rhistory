i.list=list()
historyii=historytabSim[ii,]
for(jj in 1:test.n){
d.ij=dmatrix[sample.index,] # Define cross-immunity matrix for sample strain
d_vector=melt(t(d.ij))$value
testyr=test_years[jj]
testyearI=c(1:inf.n)[inf_years==testyr]
expect=func1(historyii,sample.index,d_vector,thetastar,testyearI) # Output expectation
#titredat=sapply(expect,function(x){rpois(1,x)}) # Generate titre
titredat=round(expect)
titredat=sapply(titredat,function(x){min(x,8)})
i.list[[jj]]=rbind(test.year=rep(testyr,nstrains),
titredat,
strain_years,
sample.index
)
}
#i.list[[1]][2,]
#
test.list[[ii]]=i.list
}
# Export data
#browser()
if(is.null(historytabPost)){
save(test_years,inf_years,strain_years,n_part,test.list,age.yr,historytabSim,file=paste("R_datasets/Simulated_data.RData",sep=""))
}else{
save(test_years,inf_years,strain_years,n_part,test.list,age.yr,file=paste("R_datasets/Simulated_dataPost.RData",sep=""))
}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Resample infection history - included ageA table in case needed later
SampleHistory<-function(historyA,pick,inf.n,ageA,inf_years){
infvector=c(1:inf.n)
infvector2=rev(infvector)
for(ii in pick){
#ls_pick=foreach(ii=(1:length(pick))) %dopar% {  # Parallel loop - slower to farm out
rand1=runif(1)
x=historyA[ii,]
# Remove infection
if(rand1<1/3){
infectID=infvector[(as.numeric(x)>0)]
if(length(infectID)>0){
x[sample(c(infectID,infectID),1)]=0
}
}
# Add new infection
if(rand1>1/3 & rand1<2/3){
ninfecID=infvector[(as.numeric(x)==0)]
if(length(ninfecID)>0){
x[sample(c(ninfecID,ninfecID),1)]=1
}
}
# Move infection
if(rand1>2/3){
infectID=infvector[(as.numeric(x)>0)]
ninfecID=infvector[(as.numeric(x)==0)]
if(length(infectID)>0 & length(ninfecID)>0){
x[sample(c(infectID,infectID),1)]=0
x[sample(c(ninfecID,ninfecID),1)]=1
}
}
# Add prior on birth year - exponentially less likely to update if infections outside
#if(inf.n>ageA[ii]){
#  a1=0.01*exp(1)*exp(-sum(x[1:(inf.n-ageA[ii])])) # EDIT infvector2 tweak this parameter to penalise more/less
#  if( a1 > runif(1) ){
#    historyA[ii,]=x
#  }
#}
historyA[ii,]=x
} # end loop over individuals
historyA
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Resample age - add 1, 0, -1 with equal probability
SampleAge<-function(pick,ageA){
b1=sapply(ageA[pick],function(x){x+sample(c(-1:1),1)})
ageA[pick]=b1
ageA
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Convert infection history to binary - not currently used
convert_binary <- function(x){sum(2^(which(rev(unlist(strsplit(as.character(x), "")) == 1))-1))}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ComputeProbability<-function(marg_likelihood,marg_likelihood_star){
# uniform priors
p_theta_star = 1; p_theta = 1
# probability symmetic
q_theta_given_theta_star = 1; q_theta_star_given_theta = 1
val = exp((marg_likelihood_star-marg_likelihood))*(p_theta_star/p_theta)*(q_theta_given_theta_star/q_theta_star_given_theta)
min(val, 1)
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SampleTheta<-function(theta_in,m,covartheta){
# sample new parameters from nearby:
theta_star = as.numeric(exp(rmvnorm(1,log(theta_in), covartheta)))
names(theta_star)=names(theta_in)
return(thetaS=theta_star)
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Metropolis-Hastings algorithm
run_mcmc<-function(test.yr,test_years,inf_years,strain_years,n_part,test.list,theta0,runs,varpart_prob,hist.true=NULL,switch1=2){
# DEBUG set params <<<
# hist.true=NULL; test.yr=c(2010,2011); runs=1; switch1=2; varpart_prob=0.05
test.n=length(test_years); inf.n=length(inf_years); nstrains=length(strain_years)
sample.index=strain_years-min(strain_years)+1
historyii=rbinom(inf.n, 1, 0.1) # dummy infection history
# Index variables
jj_year=match(test.yr,test_years); testyear_index=match(test.yr,inf_years)
sample.n=length(jj_year)
# Specific MCMC parameters
nparam=length(theta); npcov=rep(1,nparam)
cov_matrix_theta0 = diag(npcov)
thetatab=matrix(NA,nrow=(runs+1),ncol=length(theta)); colnames(thetatab)=names(theta)
thetatab[1,]=theta
historytab=matrix(NA,nrow=n_part,ncol=inf.n)
historytabCollect=historytab
age.tab=matrix(NA,nrow=n_part,ncol=1)
# Pick plausible initial conditions
if(is.null(hist.true)){
for(ii in 1:n_part){
historytab[ii,]=setuphistIC(ii,jj_year[1],inf.n,test.list,testyear_index) # Pick first test year
}
}else{historytab=hist.true}
colnames(historytab)=as.character(inf_years)
# Plausible intial ages - based on earliest strain in history
#age.tab=sapply(
#  apply(historytab,1,function(x){min(c(inf.n:1)[x==1])}),
#  function(y){ sample(y:80, 1, replace=T) })
# Preallocate matrices
likelihoodtab=matrix(-Inf,nrow=(runs+1),ncol=n_part)
accepttabT=NULL
accepttabH=NULL
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run MCMC
for (m in 1:runs){
# Adaptive covariance matrix
if(m==1){
epsilon0=0.01
cov_matrix_theta=epsilon0*cov_matrix_theta0
varpart_prob0=varpart_prob
}else{
epsilon0=max(0.00001,min(1,exp(log(epsilon0)+(accept_rateT-0.234)*0.999^m)))
cov_matrix_theta=epsilon0*cov_matrix_theta0
varpart_prob0=max(0.01,min(1,exp(log(varpart_prob0)+(accept_rateH-0.234)*0.999^m)))
}
# - - - - - - - - - - - - - - - -
# Resample parameters
#aTime=Sys.time() #TIMER 1
if(m %% switch1==0 | m==1){ # m==1 condition as have to calculate all liks on first step
theta_star = SampleTheta(thetatab[m,], m,cov_matrix_theta) #resample theta
#age_star = age.tab
history_star = historytab
pickA=c(1:n_part)
}else{
pickA=NULL
pickA=sample(n_part, ceiling(varpart_prob0*n_part)) # check that not length zero
#age_star = age.tab #SampleAge(pickA,age.tab) #resample age (not for now)
history_star = SampleHistory(historytab,pickA,inf.n,age_star,inf_years) #resample history
theta_star =thetatab[m,]
}
dmatrix=outputdmatrix(theta_star,inf_years) # Arrange parameters
# - - - - - - - - - - - - - - - -
# LIKELIHOOD function - Only calculate for updated history
lik_val=likelihoodtab[m,]
for(ii in pickA){
# Set history to zero after test date
lik.ii=rep(NA,sample.n)
for(kk in 1:sample.n){
#DEBUG DEBUG set params <<<  ii=1;kk=2;historyii=as.numeric(history_star[ii,])
lik.ii[kk]=estimatelik(ii,jj_year[kk],as.numeric(history_star[ii,]),dmatrix,theta_star,test.list,testyear_index[kk])
}
lik.ii
lik_val[ii]=sum(lik.ii)
#if(is.na(lik_val[ii])){lik_val[ii]=-Inf}
}
# - - - - - - - - - - - - - - - -
# Metropolis Hastings step
#print(c(m,sum(likelihoodtab[m,]),sum(lik_val))) # PRINT LIKELIHOOD
output_prob = ComputeProbability(sum(likelihoodtab[m,]),sum(lik_val))
if(runif(1) < output_prob){
thetatab[m+1,] = theta_star
if(m %% switch1!=0){historytab = history_star} # Only change if resampled
#if(m %% switch1==0){age.tab = age_star} # Only change if resampled
likelihoodtab[m+1,] = lik_val
if(m %% switch1==0){accepttabT=c(accepttabT,1)}
if(m %% switch1!=0){accepttabH=c(accepttabH,1)}
}else{
thetatab[m+1,] = thetatab[m,]
likelihoodtab[m+1,] = likelihoodtab[m,]
if(m %% switch1==0){accepttabT=c(accepttabT,0)}
if(m %% switch1!=0){accepttabH=c(accepttabH,0)}
}
if(m<max(100)){
accept_rateT=0.234
accept_rateH=0.234
}else{
accept_rateT=sum(accepttabT)/length(accepttabT)
accept_rateH=sum(accepttabH)/length(accepttabH)
}
#Sys.time()-aTime  #TIMER 2
if(m %% min(runs,20) ==0){
historytabCollect=rbind(historytabCollect,historytab)
}
if(m %% min(runs,100) ==0){
print(c(m,accept_rateH,varpart_prob0,round(sum(likelihoodtab[m,]))))
save(likelihoodtab,thetatab,n_part,test.list,historytab,historytabCollect,age.tab,file=paste("posterior_sero_runs/outputR",test.yr[1],".RData",sep=""))
}
} #End runs loop
}
#load("R_datasets/HaNam_data.RData")
load("R_datasets/Simulated_data.RData")
# Plot simulation data vs history
source("simulation_plots.R")
# Set initial theta
theta0=c(mu=NA,tau1=NA,tau2=NA,wane=NA,sigma=NA,muShort=NA)
theta0[["mu"]]=4
theta0[["sigma"]]=0.3
theta0[["tau1"]]=0.001
theta0[["tau2"]]=0.2
theta0[["muShort"]]=2
theta0[["wane"]]=0.001
theta=theta0
vp1=0.05 #probability individual infection history resampled
define.year=c(2010)
# NEED TO RE INITIALISE DATAFRAME IF REPEAT RUN
run_mcmc(test.yr=define.year,runs=10000,hist.true=NULL,switch1=10000,varpart_prob=vp1,test_years,inf_years,strain_years,n_part,test.list,theta0)
CMC for specific data set
#load("R_datasets/HaNam_data.RData")
load("R_datasets/Simulated_data.RData")
# Plot simulation data vs history
source("simulation_plots.R")
#load("R_datasets/HaNam_data.RData")
load("R_datasets/Simulated_data.RData")
# Plot simulation data vs history
source("simulation_plots.R")
# Set initial theta
theta0=c(mu=NA,tau1=NA,tau2=NA,wane=NA,sigma=NA,muShort=NA)
theta0[["mu"]]=4
theta0[["sigma"]]=0.3
theta0[["tau1"]]=0.001
theta0[["tau2"]]=0.2
theta0[["muShort"]]=2
theta0[["wane"]]=0.001
theta=theta0
vp1=0.05 #probability individual infection history resampled
define.year=c(2010)
# NEED TO RE INITIALISE DATAFRAME IF REPEAT RUN
run_mcmc(test.yr=define.year,runs=10000,hist.true=NULL,switch1=100,varpart_prob=vp1,test_years,inf_years,strain_years,n_part,test.list,theta0)
# Plot posteriors and compare to simulation
simDat=TRUE
source("simulation_diagnostics.R",local=TRUE)
#load("R_datasets/HaNam_data.RData")
load("R_datasets/Simulated_data.RData")
# Plot simulation data vs history
source("simulation_plots.R")
# Set initial theta
theta0=c(mu=NA,tau1=NA,tau2=NA,wane=NA,sigma=NA,muShort=NA)
theta0[["mu"]]=4
theta0[["sigma"]]=0.3
theta0[["tau1"]]=0.001
theta0[["tau2"]]=0.2
theta0[["muShort"]]=2
theta0[["wane"]]=0.001
theta=theta0
vp1=0.05 #probability individual infection history resampled
define.year=c(2010)
# NEED TO RE INITIALISE DATAFRAME IF REPEAT RUN
run_mcmc(test.yr=define.year,runs=10000,hist.true=NULL,switch1=10,varpart_prob=vp1,test_years,inf_years,strain_years,n_part,test.list,theta0)
# Plot posteriors and compare to simulation
simDat=TRUE
source("simulation_diagnostics.R",local=TRUE)
# - - - - - - - - - - - - -
# Generate simulated data - tau1=back-boost  / tau2=suppress
thetaSim=c(mu=4,tau1=0,tau2=0.2,wane=0.2,sigma=0.3,muShort=0.1)
npartM=200
simulate_data(test_years=seq(2010,2011), # this needs to be vector
inf_years=seq(1980,2011,1),
strain_years=seq(1980,2010,2),
n_part=npartM,thetastar=thetaSim,p.inf=0.1)
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# INFERENCE MODEL
# Run MCMC for specific data set
#load("R_datasets/HaNam_data.RData")
load("R_datasets/Simulated_data.RData")
# Plot simulation data vs history
source("simulation_plots.R")
# Set initial theta
theta0=c(mu=NA,tau1=NA,tau2=NA,wane=NA,sigma=NA,muShort=NA)
theta0[["mu"]]=4
theta0[["sigma"]]=0.3
theta0[["tau1"]]=0.001
theta0[["tau2"]]=0.2
theta0[["muShort"]]=2
theta0[["wane"]]=0.2
theta=theta0
vp1=0.05 #probability individual infection history resampled
define.year=c(2010,2011)
# NEED TO RE INITIALISE DATAFRAME IF REPEAT RUN
run_mcmc(test.yr=define.year,runs=10000,hist.true=NULL,switch1=10,varpart_prob=vp1,test_years,inf_years,strain_years,n_part,test.list,theta0)
# - - - - - - - - - - - - -
# Generate simulated data - tau1=back-boost  / tau2=suppress
thetaSim=c(mu=4,tau1=0,tau2=0.2,wane=0.05,sigma=0.3,muShort=0.1)
npartM=200
simulate_data(test_years=seq(2010,2011), # this needs to be vector
inf_years=seq(1980,2011,1),
strain_years=seq(1980,2010,2),
n_part=npartM,thetastar=thetaSim,p.inf=0.1)
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# INFERENCE MODEL
# Run MCMC for specific data set
#load("R_datasets/HaNam_data.RData")
load("R_datasets/Simulated_data.RData")
# Plot simulation data vs history
source("simulation_plots.R")
# Set initial theta
theta0=c(mu=NA,tau1=NA,tau2=NA,wane=NA,sigma=NA,muShort=NA)
theta0[["mu"]]=4
theta0[["sigma"]]=0.3
theta0[["tau1"]]=0.001
theta0[["tau2"]]=0.2
theta0[["muShort"]]=2
theta0[["wane"]]=0.05
theta=theta0
vp1=0.05 #probability individual infection history resampled
define.year=c(2010,2011)
# NEED TO RE INITIALISE DATAFRAME IF REPEAT RUN
run_mcmc(test.yr=define.year,runs=10000,hist.true=NULL,switch1=10,varpart_prob=vp1,test_years,inf_years,strain_years,n_part,test.list,theta0)
# Plot posteriors and compare to simulation
simDat=TRUE
source("simulation_diagnostics.R",local=TRUE)
# - - - - - - - - - - - - -
# Generate simulated data - tau1=back-boost  / tau2=suppress
thetaSim=c(mu=4,tau1=0.2,tau2=0.2,wane=0.01,sigma=0.3,muShort=0.1)
npartM=200
simulate_data(test_years=seq(2010,2011), # this needs to be vector
inf_years=seq(1980,2011,1),
strain_years=seq(1980,2010,2),
n_part=npartM,thetastar=thetaSim,p.inf=0.1)
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# INFERENCE MODEL
# Run MCMC for specific data set
#load("R_datasets/HaNam_data.RData")
load("R_datasets/Simulated_data.RData")
# Plot simulation data vs history
source("simulation_plots.R")
# Set initial theta
theta0=c(mu=NA,tau1=NA,tau2=NA,wane=NA,sigma=NA,muShort=NA)
theta0[["mu"]]=4
theta0[["sigma"]]=0.3
theta0[["tau1"]]=0.2
theta0[["tau2"]]=0.2
theta0[["muShort"]]=2
theta0[["wane"]]=0.01
theta=theta0
vp1=0.05 #probability individual infection history resampled
define.year=c(2010,2011)
# NEED TO RE INITIALISE DATAFRAME IF REPEAT RUN
run_mcmc(test.yr=define.year,runs=10000,hist.true=NULL,switch1=20,varpart_prob=vp1,test_years,inf_years,strain_years,n_part,test.list,theta0)
# Plot posteriors and compare to simulation
simDat=TRUE
source("simulation_diagnostics.R",local=TRUE)
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Simulation diagnostics
# Compare MCMC output to simulation data
load(paste("posterior_sero_runs/outputR",define.year[1],".RData",sep=""))
par(mfrow=c(3,3))
par(mar = c(5,5,1,1))
colA=rgb(0.8,0.8,0.8)
# Plot profile likelihood
lik.tot=rowSums(likelihoodtab)
maxlik=max(lik.tot)
runsPOST=length(lik.tot[lik.tot!=-Inf])
runs1=ceiling(0.2*runsPOST)
plot(rowSums(likelihoodtab)[runs1:runsPOST],type="l",ylab="likelihood",ylim=c(maxlik-500,maxlik))
plot(as.data.frame(thetatab)$mu[runs1:runsPOST],type="l",ylab="mu")
plot(as.data.frame(thetatab)$sigma[runs1:runsPOST],type="l",ylab="sigma")
# Plot histogram of boosting
hist(as.data.frame(thetatab)$mu[runs1:runsPOST],main=NULL,col=colA,xlab="mu",prob=TRUE,xlim=c(1,5))
if(simDat==T){abline(v=thetaSim[["mu"]],col="red")}
hist(as.data.frame(thetatab)$sigma[runs1:runsPOST],main=NULL,col=colA,xlab="sigma",xlim=c(0,0.5))
if(simDat==T){abline(v=thetaSim[["sigma"]],col="red")}
hist(as.data.frame(thetatab)$tau1[runs1:runsPOST],main=NULL,col=colA,xlab="tau1",prob=TRUE,xlim=c(0,0.5))
if(simDat==T){abline(v=thetaSim[["tau1"]],col="red")}
hist(as.data.frame(thetatab)$tau2[runs1:runsPOST],main=NULL,col=colA,xlab="tau2",prob=TRUE,xlim=c(0,0.5))
if(simDat==T){abline(v=thetaSim[["tau2"]],col="red")}
hist(as.data.frame(thetatab)$wane[runs1:runsPOST],main=NULL,col=colA,xlab="wane",prob=TRUE,xlim=c(0,0.5))
if(simDat==T){abline(v=thetaSim[["wane"]],col="red")}
hist.sample=length(historytabCollect[,1])/n_part
ind.infN=rowSums(historytabCollect[round(0.2*hist.sample*n_part):(hist.sample*n_part),])
hist(ind.infN,breaks=seq(-0.5,20.5,1),col=colA,xlab="infections",prob=TRUE,main=paste("mean/med=",signif(mean(ind.infN),2),"/",median(ind.infN),sep=""))
dev.copy(pdf,paste("plot_simulations/posterior",ifelse(simDat==T,paste("mu",thetaSim[["mu"]],"_sigma",thetaSim[["sigma"]],sep=""),""),"_npart",n_part,"_yr",define.year,".pdf",sep=""),width=12,height=8)
dev.off()
if(simDat==T){
# UPDATE THIS BIT
#Compare model fits using posterior infection history (historytabPost) and parameters
simulate_data(test_years,historytabPost=historytab,
inf_years,
strain_years,
n_part=npartM,thetastar=as.data.frame(thetatab)[runsPOST,],p.inf=0.1)
load("R_datasets/Simulated_dataPost.RData")
par(mfrow=c(2,5))
par(mar = c(5,5,1,1))
for(ii0 in 1:n_part){
lenhis=rep(0,length(historytabSim[ii0,]))
plot(8*historytabSim[ii0,],type="l",ylim=c(0,9),col='white')
#for(jj in 1:length(lenhis)){
#  lines(c(jj,jj),c(0,9*historytabSim[ii0,jj]),col='red')
#}
for(jj in 1:length(lenhis)){
lines(c(jj,jj),c(0,9*historytab[ii0,jj]),col='blue')
}
lines(test.list[[ii0]][[1]][4,],test.list[[ii0]][[1]][2,],type="l")
points(test.list[[ii0]][[1]][4,],test.list[[ii0]][[1]][2,],pch=19)
if(ii0 %% 10==0){
dev.copy(pdf,paste("plot_simulations/sim",ii0,"P.pdf",sep=""),width=12,height=6)
dev.off()
}
}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Simulation diagnostics
# Compare MCMC output to simulation data
load(paste("posterior_sero_runs/outputR",define.year[1],".RData",sep=""))
par(mfrow=c(3,3))
par(mar = c(5,5,1,1))
colA=rgb(0.8,0.8,0.8)
# Plot profile likelihood
lik.tot=rowSums(likelihoodtab)
maxlik=max(lik.tot)
runsPOST=length(lik.tot[lik.tot!=-Inf])
runs1=ceiling(0.2*runsPOST)
plot(rowSums(likelihoodtab)[runs1:runsPOST],type="l",ylab="likelihood",ylim=c(maxlik-500,maxlik))
plot(as.data.frame(thetatab)$mu[runs1:runsPOST],type="l",ylab="mu")
plot(as.data.frame(thetatab)$sigma[runs1:runsPOST],type="l",ylab="sigma")
# Plot histogram of boosting
hist(as.data.frame(thetatab)$mu[runs1:runsPOST],main=NULL,col=colA,xlab="mu",prob=TRUE,xlim=c(1,5))
if(simDat==T){abline(v=thetaSim[["mu"]],col="red")}
hist(as.data.frame(thetatab)$sigma[runs1:runsPOST],main=NULL,col=colA,xlab="sigma",xlim=c(0,0.5))
if(simDat==T){abline(v=thetaSim[["sigma"]],col="red")}
hist(as.data.frame(thetatab)$tau1[runs1:runsPOST],main=NULL,col=colA,xlab="tau1",prob=TRUE,xlim=c(0,0.5))
if(simDat==T){abline(v=thetaSim[["tau1"]],col="red")}
hist(as.data.frame(thetatab)$tau2[runs1:runsPOST],main=NULL,col=colA,xlab="tau2",prob=TRUE,xlim=c(0,0.5))
if(simDat==T){abline(v=thetaSim[["tau2"]],col="red")}
hist(as.data.frame(thetatab)$wane[runs1:runsPOST],main=NULL,col=colA,xlab="wane",prob=TRUE,xlim=c(0,0.1))
if(simDat==T){abline(v=thetaSim[["wane"]],col="red")}
hist.sample=length(historytabCollect[,1])/n_part
ind.infN=rowSums(historytabCollect[round(0.2*hist.sample*n_part):(hist.sample*n_part),])
hist(ind.infN,breaks=seq(-0.5,20.5,1),col=colA,xlab="infections",prob=TRUE,main=paste("mean/med=",signif(mean(ind.infN),2),"/",median(ind.infN),sep=""))
dev.copy(pdf,paste("plot_simulations/posterior",ifelse(simDat==T,paste("mu",thetaSim[["mu"]],"_sigma",thetaSim[["sigma"]],sep=""),""),"_npart",n_part,"_yr",define.year,".pdf",sep=""),width=12,height=8)
dev.off()
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Simulation diagnostics
# Compare MCMC output to simulation data
load(paste("posterior_sero_runs/outputR",define.year[1],".RData",sep=""))
par(mfrow=c(3,3))
par(mar = c(5,5,1,1))
colA=rgb(0.8,0.8,0.8)
# Plot profile likelihood
lik.tot=rowSums(likelihoodtab)
maxlik=max(lik.tot)
runsPOST=length(lik.tot[lik.tot!=-Inf])
runs1=ceiling(0.2*runsPOST)
plot(rowSums(likelihoodtab)[runs1:runsPOST],type="l",ylab="likelihood",ylim=c(maxlik-500,maxlik))
plot(as.data.frame(thetatab)$mu[runs1:runsPOST],type="l",ylab="mu")
plot(as.data.frame(thetatab)$sigma[runs1:runsPOST],type="l",ylab="sigma")
# Plot histogram of boosting
hist(as.data.frame(thetatab)$mu[runs1:runsPOST],main=NULL,col=colA,xlab="mu",prob=TRUE,xlim=c(1,5))
if(simDat==T){abline(v=thetaSim[["mu"]],col="red")}
hist(as.data.frame(thetatab)$sigma[runs1:runsPOST],main=NULL,col=colA,xlab="sigma",xlim=c(0,0.5))
if(simDat==T){abline(v=thetaSim[["sigma"]],col="red")}
hist(as.data.frame(thetatab)$tau1[runs1:runsPOST],main=NULL,col=colA,xlab="tau1",prob=TRUE,xlim=c(0,0.5))
if(simDat==T){abline(v=thetaSim[["tau1"]],col="red")}
hist(as.data.frame(thetatab)$tau2[runs1:runsPOST],main=NULL,col=colA,xlab="tau2",prob=TRUE,xlim=c(0,0.5))
if(simDat==T){abline(v=thetaSim[["tau2"]],col="red")}
hist(as.data.frame(thetatab)$wane[runs1:runsPOST],main=NULL,col=colA,xlab="wane",prob=TRUE,xlim=c(0,0.05))
if(simDat==T){abline(v=thetaSim[["wane"]],col="red")}
hist.sample=length(historytabCollect[,1])/n_part
ind.infN=rowSums(historytabCollect[round(0.2*hist.sample*n_part):(hist.sample*n_part),])
hist(ind.infN,breaks=seq(-0.5,20.5,1),col=colA,xlab="infections",prob=TRUE,main=paste("mean/med=",signif(mean(ind.infN),2),"/",median(ind.infN),sep=""))
dev.copy(pdf,paste("plot_simulations/posterior",ifelse(simDat==T,paste("mu",thetaSim[["mu"]],"_sigma",thetaSim[["sigma"]],sep=""),""),"_npart",n_part,"_yr",define.year,".pdf",sep=""),width=12,height=8)
dev.off()
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Simulation diagnostics
# Compare MCMC output to simulation data
load(paste("posterior_sero_runs/outputR",define.year[1],".RData",sep=""))
par(mfrow=c(3,3))
par(mar = c(5,5,1,1))
colA=rgb(0.8,0.8,0.8)
# Plot profile likelihood
lik.tot=rowSums(likelihoodtab)
maxlik=max(lik.tot)
runsPOST=length(lik.tot[lik.tot!=-Inf])
runs1=ceiling(0.2*runsPOST)
plot(rowSums(likelihoodtab)[runs1:runsPOST],type="l",ylab="likelihood",ylim=c(maxlik-500,maxlik))
plot(as.data.frame(thetatab)$mu[runs1:runsPOST],type="l",ylab="mu")
plot(as.data.frame(thetatab)$sigma[runs1:runsPOST],type="l",ylab="sigma")
# Plot histogram of boosting
hist(as.data.frame(thetatab)$mu[runs1:runsPOST],main=NULL,col=colA,xlab="mu",prob=TRUE,xlim=c(1,5))
if(simDat==T){abline(v=thetaSim[["mu"]],col="red")}
hist(as.data.frame(thetatab)$sigma[runs1:runsPOST],main=NULL,col=colA,xlab="sigma",xlim=c(0,0.5))
if(simDat==T){abline(v=thetaSim[["sigma"]],col="red")}
hist(as.data.frame(thetatab)$tau1[runs1:runsPOST],main=NULL,col=colA,xlab="tau1",prob=TRUE,xlim=c(0,0.5))
if(simDat==T){abline(v=thetaSim[["tau1"]],col="red")}
hist(as.data.frame(thetatab)$tau2[runs1:runsPOST],main=NULL,col=colA,xlab="tau2",prob=TRUE,xlim=c(0,1))
if(simDat==T){abline(v=thetaSim[["tau2"]],col="red")}
hist(as.data.frame(thetatab)$wane[runs1:runsPOST],main=NULL,col=colA,xlab="wane",prob=TRUE,xlim=c(0,0.05))
if(simDat==T){abline(v=thetaSim[["wane"]],col="red")}
hist.sample=length(historytabCollect[,1])/n_part
ind.infN=rowSums(historytabCollect[round(0.2*hist.sample*n_part):(hist.sample*n_part),])
hist(ind.infN,breaks=seq(-0.5,20.5,1),col=colA,xlab="infections",prob=TRUE,main=paste("mean/med=",signif(mean(ind.infN),2),"/",median(ind.infN),sep=""))
dev.copy(pdf,paste("plot_simulations/posterior",ifelse(simDat==T,paste("mu",thetaSim[["mu"]],"_sigma",thetaSim[["sigma"]],sep=""),""),"_npart",n_part,"_yr",define.year,".pdf",sep=""),width=12,height=8)
dev.off()
