source("sero_funcs_steven.r") # Load Flu B format
for(kk in 1:3){
plot.posteriors(year_test=c(2007:2012),loadseed=kk,flu.type="H3HN",
fr.lim=T,plotmap = F,plot.corr = T,linearFn=T)
}
plot.posterior.titres(loadseed=1,flu.type="H3HN",simDat=F,
year_test=c(2007:2012),btstrap=5,plotRes=T,linearFn=T) # Note linear function
source("sero_functions.R")
source("posterior_analysis_flu.R")
source("sero_funcs_steven.r") # Load Flu B format
plot.multi.chain.posteriors(burnCut=0.25,flu.type="H3HN",simDat=T,year_test=c(2007:2012),
linearFn=T,loadpick = c(1:3))
simDat=T;year_test=c(2007:2012);plotmap=F;fr.lim=T;flu.type="H3HN"; loadpick=c(1:4); burnCut=0.25; loadseed=1; linearFn=T
storeMu = NULL
storeMu2 = NULL
storeLik = NULL
storeSigma = NULL
storeSigma2 = NULL
storeError = NULL
storeTau2 = NULL
storeWane = NULL
if(simDat==T){load(paste("R_datasets/Simulated_data_SIM_",1,".RData",sep=""))
theta.true=theta.sim.out
}
col.list=list(col1=rgb(0.9,0.6,0),col2=rgb(0.2,0,0.8),col3=rgb(0.1,0.6,0.2),col4=rgb(1,0.4,1),col5=rgb(0.8,0,0.2))
for(loadseed in loadpick){
if(simDat==F){loadseedA=paste(loadseed,"_",flu.type,sep="")}else{loadseedA=paste("SIM_",loadseed,sep="")}
load(paste("posterior_sero_runs/outputR_f",paste(year_test,"_",collapse="",sep=""),"s",loadseedA,"_lin",linearFn,".RData",sep=""))
# Define lengths and sizes of inputs
lik.tot=rowSums(likelihoodtab)
runsPOST=min(8e5, length(lik.tot[lik.tot!=-Inf]) )
maxlik=max(lik.tot[1:runsPOST])
#plot(as.data.frame(thetatab)$mu[runs1:runsPOST],type="l",ylab="mu")
# - - - - - - -
# Calculate ESS by burn-in
runs1=ceiling(0*runsPOST)
thetaT=as.data.frame(thetatab)[runs1:runsPOST,]
ltheta=length(thetaT[["mu"]])
thin.theta=thetaT[seq(1,ltheta,switch1),]
lik.totA=lik.tot[runs1:runsPOST]
thin.lik = lik.totA[seq(1,ltheta,switch1)]
storeLik = rbind(storeLik,thin.lik)
storeMu = rbind(storeMu,thin.theta[["mu"]])
storeMu2 = rbind(storeMu2,thin.theta[["muShort"]])
storeSigma = rbind(storeSigma,thin.theta[["sigma"]])
storeSigma2 = rbind(storeSigma2,thin.theta[["sigma2"]])
storeWane = rbind(storeWane,thin.theta[["wane"]])
storeError = rbind(storeError,thin.theta[["error"]])
storeTau2 = rbind(storeTau2,thin.theta[["tau2"]])
}
loadpick
loadpick=1:3
for(loadseed in loadpick){
if(simDat==F){loadseedA=paste(loadseed,"_",flu.type,sep="")}else{loadseedA=paste("SIM_",loadseed,sep="")}
load(paste("posterior_sero_runs/outputR_f",paste(year_test,"_",collapse="",sep=""),"s",loadseedA,"_lin",linearFn,".RData",sep=""))
# Define lengths and sizes of inputs
lik.tot=rowSums(likelihoodtab)
runsPOST=min(8e5, length(lik.tot[lik.tot!=-Inf]) )
maxlik=max(lik.tot[1:runsPOST])
#plot(as.data.frame(thetatab)$mu[runs1:runsPOST],type="l",ylab="mu")
# - - - - - - -
# Calculate ESS by burn-in
runs1=ceiling(0*runsPOST)
thetaT=as.data.frame(thetatab)[runs1:runsPOST,]
ltheta=length(thetaT[["mu"]])
thin.theta=thetaT[seq(1,ltheta,switch1),]
lik.totA=lik.tot[runs1:runsPOST]
thin.lik = lik.totA[seq(1,ltheta,switch1)]
storeLik = rbind(storeLik,thin.lik)
storeMu = rbind(storeMu,thin.theta[["mu"]])
storeMu2 = rbind(storeMu2,thin.theta[["muShort"]])
storeSigma = rbind(storeSigma,thin.theta[["sigma"]])
storeSigma2 = rbind(storeSigma2,thin.theta[["sigma2"]])
storeWane = rbind(storeWane,thin.theta[["wane"]])
storeError = rbind(storeError,thin.theta[["error"]])
storeTau2 = rbind(storeTau2,thin.theta[["tau2"]])
}
loadseed=1
if(simDat==F){loadseedA=paste(loadseed,"_",flu.type,sep="")}else{loadseedA=paste("SIM_",loadseed,sep="")}
load(paste("posterior_sero_runs/outputR_f",paste(year_test,"_",collapse="",sep=""),"s",loadseedA,"_lin",linearFn,".RData",sep=""))
# Define lengths and sizes of inputs
lik.tot=rowSums(likelihoodtab)
runsPOST=min(8e5, length(lik.tot[lik.tot!=-Inf]) )
maxlik=max(lik.tot[1:runsPOST])
#plot(as.data.frame(thetatab)$mu[runs1:runsPOST],type="l",ylab="mu")
# - - - - - - -
# Calculate ESS by burn-in
runs1=ceiling(0*runsPOST)
thetaT=as.data.frame(thetatab)[runs1:runsPOST,]
ltheta=length(thetaT[["mu"]])
thin.theta=thetaT[seq(1,ltheta,switch1),]
lik.totA=lik.tot[runs1:runsPOST]
thin.lik = lik.totA[seq(1,ltheta,switch1)]
storeLik = rbind(storeLik,thin.lik)
storeMu = rbind(storeMu,thin.theta[["mu"]])
storeMu2 = rbind(storeMu2,thin.theta[["muShort"]])
storeSigma = rbind(storeSigma,thin.theta[["sigma"]])
storeSigma2 = rbind(storeSigma2,thin.theta[["sigma2"]])
storeWane = rbind(storeWane,thin.theta[["wane"]])
storeError = rbind(storeError,thin.theta[["error"]])
storeTau2 = rbind(storeTau2,thin.theta[["tau2"]])
loadseed=2
if(simDat==F){loadseedA=paste(loadseed,"_",flu.type,sep="")}else{loadseedA=paste("SIM_",loadseed,sep="")}
load(paste("posterior_sero_runs/outputR_f",paste(year_test,"_",collapse="",sep=""),"s",loadseedA,"_lin",linearFn,".RData",sep=""))
# Define lengths and sizes of inputs
lik.tot=rowSums(likelihoodtab)
runsPOST=min(8e5, length(lik.tot[lik.tot!=-Inf]) )
maxlik=max(lik.tot[1:runsPOST])
#plot(as.data.frame(thetatab)$mu[runs1:runsPOST],type="l",ylab="mu")
# - - - - - - -
# Calculate ESS by burn-in
runs1=ceiling(0*runsPOST)
thetaT=as.data.frame(thetatab)[runs1:runsPOST,]
ltheta=length(thetaT[["mu"]])
thin.theta=thetaT[seq(1,ltheta,switch1),]
lik.totA=lik.tot[runs1:runsPOST]
thin.lik = lik.totA[seq(1,ltheta,switch1)]
storeLik = rbind(storeLik,thin.lik)
storeMu = rbind(storeMu,thin.theta[["mu"]])
storeMu2 = rbind(storeMu2,thin.theta[["muShort"]])
storeSigma = rbind(storeSigma,thin.theta[["sigma"]])
storeSigma2 = rbind(storeSigma2,thin.theta[["sigma2"]])
storeWane = rbind(storeWane,thin.theta[["wane"]])
storeError = rbind(storeError,thin.theta[["error"]])
storeTau2 = rbind(storeTau2,thin.theta[["tau2"]])
loadseed=3
if(simDat==F){loadseedA=paste(loadseed,"_",flu.type,sep="")}else{loadseedA=paste("SIM_",loadseed,sep="")}
load(paste("posterior_sero_runs/outputR_f",paste(year_test,"_",collapse="",sep=""),"s",loadseedA,"_lin",linearFn,".RData",sep=""))
# Define lengths and sizes of inputs
lik.tot=rowSums(likelihoodtab)
runsPOST=min(8e5, length(lik.tot[lik.tot!=-Inf]) )
maxlik=max(lik.tot[1:runsPOST])
#plot(as.data.frame(thetatab)$mu[runs1:runsPOST],type="l",ylab="mu")
# - - - - - - -
# Calculate ESS by burn-in
runs1=ceiling(0*runsPOST)
thetaT=as.data.frame(thetatab)[runs1:runsPOST,]
ltheta=length(thetaT[["mu"]])
thin.theta=thetaT[seq(1,ltheta,switch1),]
lik.totA=lik.tot[runs1:runsPOST]
thin.lik = lik.totA[seq(1,ltheta,switch1)]
storeLik = rbind(storeLik,thin.lik)
storeMu = rbind(storeMu,thin.theta[["mu"]])
storeMu2 = rbind(storeMu2,thin.theta[["muShort"]])
storeSigma = rbind(storeSigma,thin.theta[["sigma"]])
storeSigma2 = rbind(storeSigma2,thin.theta[["sigma2"]])
storeWane = rbind(storeWane,thin.theta[["wane"]])
storeError = rbind(storeError,thin.theta[["error"]])
storeTau2 = rbind(storeTau2,thin.theta[["tau2"]])
thin.theta[["mu"]]
kk
kk=1
source("sero_functions.R")
source("posterior_analysis_flu.R")
source("sero_funcs_steven.r") # Load Flu B format
data.infer(year_test=dy1,mcmc.iterations=1e2,loadseed=kk,
flutype=flutype0,fix.param=c("tau1","vary.init"),
fit.spline=am.spl,switch0=2,linearFn=T) #,"map.fit"
source("sero_functions.R")
source("posterior_analysis_flu.R")
source("sero_funcs_steven.r") # Load Flu B format
data.infer(year_test=dy1,mcmc.iterations=500,loadseed=kk,
flutype=flutype0,fix.param=c("tau1","vary.init"),
fit.spline=am.spl,switch0=2,linearFn=T) #,"map.fit"
data.infer(year_test=dy1,mcmc.iterations=2e3,loadseed=kk,
flutype=flutype0,fix.param=c("tau1","vary.init"),
fit.spline=am.spl,switch0=2,linearFn=T) #,"map.fit"
plot.posteriors(year_test=c(2007:2012),loadseed=kk,flu.type="H3HN",
fr.lim=T,plotmap = F,plot.corr = T,linearFn=T)
data.infer(year_test=dy1,mcmc.iterations=1e3,loadseed=kk,
flutype=flutype0,fix.param=c("tau1","vary.init"),
fit.spline=am.spl,switch0=2,linearFn=T,vp1=0.1) #,"map.fit"
plot.posteriors(year_test=c(2007:2012),loadseed=kk,flu.type="H3HN",
fr.lim=T,plotmap = F,plot.corr = T,linearFn=T)
data.infer(year_test=dy1,mcmc.iterations=1e3,loadseed=kk,
flutype=flutype0,fix.param=c("tau1","vary.init"),
fit.spline=am.spl,switch0=2,linearFn=T,vp1=0.25) #,"map.fit"
plot.posteriors(year_test=c(2007:2012),loadseed=kk,flu.type="H3HN",
fr.lim=T,plotmap = F,plot.corr = T,linearFn=T)
data.infer(year_test=dy1,mcmc.iterations=1e3,loadseed=kk,
flutype=flutype0,fix.param=c("tau1","vary.init"),
fit.spline=am.spl,switch0=2,linearFn=T,vp1=0.5) #,"map.fit"
-log(0.5)/0.5
plot.posteriors(year_test=c(2007:2012),loadseed=kk,flu.type="H3HN",
fr.lim=T,plotmap = F,plot.corr = T,linearFn=T)
# Run longitudinal inference on H3 HaNam data
flutype0="H3HN"
if(flutype0=="H3HN"){ dy1=c(2007:2012) }
#for(kk in 1:4){
foreach(kk=1:2) %dopar% {
# Fits to spline if am.spl is defined
data.infer(year_test=dy1,mcmc.iterations=1e2,loadseed=kk,
flutype=flutype0,fix.param=c("tau1","vary.init"),
fit.spline=am.spl,switch0=2,linearFn=T,vp1=0.5) #,"map.fit"
}
plot.multi.chain.posteriors(burnCut=0.25,flu.type="H3HN",loadpick=c(1:2),fr.lim=F,linearFn=T)
source("sero_functions.R")
source("posterior_analysis_flu.R")
source("sero_funcs_steven.r") # Load Flu B format
# Run longitudinal inference on H3 HaNam data
flutype0="H3HN"
if(flutype0=="H3HN"){ dy1=c(2007:2012) }
#for(kk in 1:4){
foreach(kk=1:2) %dopar% {
# Fits to spline if am.spl is defined
data.infer(year_test=dy1,mcmc.iterations=1e2,loadseed=kk,
flutype=flutype0,fix.param=c("tau1","vary.init"),
fit.spline=am.spl,switch0=2,linearFn=T,vp1=0.5) #,"map.fit"
}
plot.multi.chain.posteriors(burnCut=0.25,flu.type="H3HN",loadpick=c(1:2),fr.lim=F,linearFn=T)
source("sero_functions.R")
source("posterior_analysis_flu.R")
source("sero_funcs_steven.r") # Load Flu B format
# Run longitudinal inference on H3 HaNam data
flutype0="H3HN"
if(flutype0=="H3HN"){ dy1=c(2007:2012) }
#for(kk in 1:4){
foreach(kk=1:2) %dopar% {
# Fits to spline if am.spl is defined
data.infer(year_test=dy1,mcmc.iterations=1e2,loadseed=kk,
flutype=flutype0,fix.param=c("tau1","vary.init"),
fit.spline=am.spl,switch0=2,linearFn=T,vp1=0.5) #,"map.fit"
}
plot.multi.chain.posteriors(burnCut=0.25,flu.type="H3HN",loadpick=c(1:2),fr.lim=F,linearFn=T)
data.infer(year_test=dy1,mcmc.iterations=1e3,loadseed=kk,
flutype=flutype0,fix.param=c("tau1","vary.init"),
fit.spline=am.spl,switch0=2,linearFn=T,vp1=0.8) #,"map.fit"
plot.posteriors(year_test=c(2007:2012),loadseed=kk,flu.type="H3HN",
fr.lim=T,plotmap = F,plot.corr = T,linearFn=T)
source("sero_functions.R")
source("posterior_analysis_flu.R")
source("sero_funcs_steven.r") # Load Flu B format
plot.posteriors(year_test=c(2007:2012),loadseed=kk,flu.type="H3HN",
fr.lim=T,plotmap = F,plot.corr = T,linearFn=T)
source("sero_functions.R")
source("posterior_analysis_flu.R")
source("sero_funcs_steven.r") # Load Flu B format
plot.posteriors(year_test=c(2007:2012),loadseed=kk,flu.type="H3HN",
fr.lim=T,plotmap = F,plot.corr = T,linearFn=T)
source("sero_functions.R")
source("posterior_analysis_flu.R")
source("sero_funcs_steven.r") # Load Flu B format
plot.posteriors(year_test=c(2007:2012),loadseed=kk,flu.type="H3HN",
fr.lim=T,plotmap = F,plot.corr = T,linearFn=T)
# Run longitudinal inference on H3 HaNam data
flutype0="H3HN"
if(flutype0=="H3HN"){ dy1=c(2007:2012) }
#for(kk in 1:4){
foreach(kk=1:2) %dopar% {
# Fits to spline if am.spl is defined
data.infer(year_test=dy1,mcmc.iterations=1e4,loadseed=kk,
flutype=flutype0,fix.param=c("tau1","vary.init"),
fit.spline=am.spl,switch0=2,linearFn=T,vp1=0.5) #,"map.fit"
}
source("sero_functions.R")
source("posterior_analysis_flu.R")
source("sero_funcs_steven.r") # Load Flu B format
plot.posteriors(year_test=c(2007:2012),loadseed=kk,flu.type="H3HN",
fr.lim=T,plotmap = F,plot.corr = T,linearFn=T)
for(kk in c(2007:2012)){
flutype0="H3HN"
dy1=kk
plot.posteriors(year_test=dy1,loadseed=1,flu.type=flutype0,fr.lim=F)
}
for(kk in 1:2){
plot.posteriors(year_test=c(2007:2012),loadseed=kk,flu.type="H3HN",
fr.lim=T,plotmap = F,plot.corr = T,linearFn=T)
}
plot.multi.chain.posteriors(burnCut=0.25,flu.type="H3HN",loadpick=c(1:2),fr.lim=F,linearFn=T)
run.historical.landscapes(loadseed=1,ymax=6.05,linearFn=T,d.step=0.25)
plot.posterior.titres(loadseed=1,flu.type="H3HN",simDat=F,
year_test=c(2007:2012),btstrap=5,plotRes=T,linearFn=T) # Note linear function
source("sero_functions.R")
source("posterior_analysis_flu.R")
source("sero_funcs_steven.r") # Load Flu B format
# Run longitudinal inference on H3 HaNam data
flutype0="H3HN"
if(flutype0=="H3HN"){ dy1=c(2007:2012) }
#for(kk in 1:4){
foreach(kk=1:4) %dopar% {
# Fits to spline if am.spl is defined
data.infer(year_test=dy1,mcmc.iterations=1e3,loadseed=kk,
flutype=flutype0,fix.param=c("tau1","vary.init"),
fit.spline=am.spl,switch0=2,linearFn=T,vp1=0.5) #,"map.fit"
}
plot.multi.chain.posteriors(burnCut=0.25,flu.type="H3HN",loadpick=c(1:4),fr.lim=F,linearFn=T)
source("sero_functions.R")
source("posterior_analysis_flu.R")
source("sero_funcs_steven.r") # Load Flu B format
source("sero_functions.R")
source("posterior_analysis_flu.R")
source("sero_funcs_steven.r") # Load Flu B format
simulation.infer(seed_i=kk,mcmc.iterations=10, flu.type="H3HN", strain.fix=T,fit.spline=am.spl,linearFn=T) # Generate random data and run inference (strain.fix=T -> use Ha Nam strains)
source("sero_functions.R")
source("posterior_analysis_flu.R")
source("sero_funcs_steven.r") # Load Flu B format
simulation.infer(seed_i=kk,mcmc.iterations=10, flu.type="H3HN", strain.fix=T,fit.spline=am.spl,linearFn=T) # Generate random data and run inference (strain.fix=T -> use Ha Nam strains)
source("sero_functions.R")
source("posterior_analysis_flu.R")
source("sero_funcs_steven.r") # Load Flu B format
data.infer(year_test=dy1,mcmc.iterations=10,loadseed=kk,
flutype=flutype0,fix.param=c("tau1","vary.init"),
fit.spline=am.spl,switch0=2,linearFn=T,vp1=0.5) #,"map.fit"
source("sero_functions.R")
source("posterior_analysis_flu.R")
source("sero_funcs_steven.r") # Load Flu B format
data.infer(year_test=dy1,mcmc.iterations=10,loadseed=kk,
flutype=flutype0,fix.param=c("tau1","vary.init"),
fit.spline=am.spl,switch0=2,linearFn=T,vp1=0.5) #,"map.fit"
data.infer(year_test=dy1,mcmc.iterations=10,loadseed=kk,
flutype=flutype0,fix.param=c("tau1","vary.init"),
fit.spline=am.spl,switch0=2,linearFn=T,vp1=0.5) #,"map.fit"
sample(60,50)
# Run longitudinal inference on H3 HaNam data
flutype0="H3HN"
if(flutype0=="H3HN"){ dy1=c(2007:2012) }
#for(kk in 1:4){
foreach(kk=1:4) %dopar% {
# Fits to spline if am.spl is defined
data.infer(year_test=dy1,mcmc.iterations=1e2,loadseed=kk,
flutype=flutype0,fix.param=c("tau1","vary.init"),
fit.spline=am.spl,switch0=2,linearFn=T,vp1=0.5) #,"map.fit"
}
plot.multi.chain.posteriors(burnCut=0.25,flu.type="H3HN",loadpick=c(1:4),fr.lim=F,linearFn=T)
# Run longitudinal inference on H3 HaNam data
flutype0="H3HN"
if(flutype0=="H3HN"){ dy1=c(2007:2012) }
#for(kk in 1:4){
foreach(kk=1:4) %dopar% {
# Fits to spline if am.spl is defined
data.infer(year_test=dy1,mcmc.iterations=1e3,loadseed=kk,
flutype=flutype0,fix.param=c("tau1","vary.init"),
fit.spline=am.spl,switch0=2,linearFn=T,vp1=0.5) #,"map.fit"
}
plot.multi.chain.posteriors(burnCut=0.25,flu.type="H3HN",loadpick=c(1:4),fr.lim=F,linearFn=T)
# Run longitudinal inference on H3 HaNam data
flutype0="H3HN"
if(flutype0=="H3HN"){ dy1=c(2007:2012) }
#for(kk in 1:4){
foreach(kk=1:4) %dopar% {
# Fits to spline if am.spl is defined
data.infer(year_test=dy1,mcmc.iterations=2e3,loadseed=kk,
flutype=flutype0,fix.param=c("tau1","vary.init"),
fit.spline=am.spl,switch0=2,linearFn=T,vp1=0.4) #,"map.fit"
}
plot.multi.chain.posteriors(burnCut=0.25,flu.type="H3HN",loadpick=c(1:4),fr.lim=F,linearFn=T)
# Plot posteriors for longtudinal data (including attack rates - FIG 3) for H3 Vietnam
for(kk in 1:4){
plot.posteriors(year_test=c(2007:2012),loadseed=kk,flu.type="H3HN",
fr.lim=T,plotmap = F,plot.corr = T,linearFn=T)
}
source("sero_functions.R")
source("posterior_analysis_flu.R")
source("sero_funcs_steven.r") # Load Flu B format
simulation.infer(seed_i=kk,mcmc.iterations=10, flu.type="H3HN", strain.fix=T,fit.spline=am.spl,linearFn=T) # Generate random data and run inference (strain.fix=T -> use Ha Nam strains)
# Plot simulation study titres against inferred model
dy1=c(2007:2012)
kk=1
plot.posterior.titres(loadseed=paste("SIM_",kk,sep=""),flu.type="H3",simDat=T,year_test=c(2007:2012),btstrap=10,linearFn=T) #H3 Vietnam
#plot.posterior.titres(loadseed=paste("SIM_",kk,sep=""),flu.type="H3FS",simDat=T,year_test=c(2009),btstrap=10) #H3 FluScape
source("sero_functions.R")
source("posterior_analysis_flu.R")
source("sero_funcs_steven.r") # Load Flu B format
simulation.infer(seed_i=kk,mcmc.iterations=10, flu.type="H3HN", strain.fix=T,fit.spline=am.spl,linearFn=T) # Generate random data and run inference (strain.fix=T -> use Ha Nam strains)
# Plot simulation study titres against inferred model
dy1=c(2007:2012)
kk=1
plot.posterior.titres(loadseed=paste("SIM_",kk,sep=""),flu.type="H3",simDat=T,year_test=c(2007:2012),btstrap=10,linearFn=T) #H3 Vietnam
#plot.posterior.titres(loadseed=paste("SIM_",kk,sep=""),flu.type="H3FS",simDat=T,year_test=c(2009),btstrap=10) #H3 FluScape
source("sero_functions.R")
source("posterior_analysis_flu.R")
source("sero_funcs_steven.r") # Load Flu B format
simulation.infer(seed_i=kk,mcmc.iterations=10, flu.type="H3HN", strain.fix=T,fit.spline=am.spl,linearFn=T) # Generate random data and run inference (strain.fix=T -> use Ha Nam strains)
source("sero_functions.R")
source("posterior_analysis_flu.R")
source("sero_funcs_steven.r") # Load Flu B format
foreach(kk=1:3) %dopar% {
simulation.infer(seed_i=kk,mcmc.iterations=1e2, flu.type="H3HN", strain.fix=T,
fit.spline=am.spl,vp1=0.4,linearFn=T) # Generate random data and run inference (strain.fix=T -> use Ha Nam strains)
}
plot.multi.chain.posteriors(burnCut=0.25,flu.type="H3HN",simDat=T,year_test=c(2007:2012),
linearFn=T,loadpick = c(1:3))
# Plot simulation study titres against inferred model
dy1=c(2007:2012)
kk=1
plot.posterior.titres(loadseed=paste("SIM_",kk,sep=""),flu.type="H3",simDat=T,year_test=c(2007:2012),btstrap=10,linearFn=T) #H3 Vietnam
#plot.posterior.titres(loadseed=paste("SIM_",kk,sep=""),flu.type="H3FS",simDat=T,year_test=c(2009),btstrap=10) #H3 FluScape
simulation.infer(seed_i=kk,mcmc.iterations=1e2, flu.type="H3HN", strain.fix=T,
fit.spline=am.spl,vp1=0.4,linearFn=T) # Generate random data and run inference (strain.fix=T -> use Ha Nam strains)
source("sero_functions.R")
source("posterior_analysis_flu.R")
source("sero_funcs_steven.r") # Load Flu B format
simulation.infer(seed_i=kk,mcmc.iterations=1e2, flu.type="H3HN", strain.fix=T,
fit.spline=am.spl,vp1=0.4,linearFn=T) # Generate random data and run inference (strain.fix=T -> use Ha Nam strains)
# Plot simulation study titres against inferred model
dy1=c(2007:2012)
kk=1
plot.posterior.titres(loadseed=paste("SIM_",kk,sep=""),flu.type="H3",simDat=T,year_test=c(2007:2012),btstrap=10,linearFn=T) #H3 Vietnam
#plot.posterior.titres(loadseed=paste("SIM_",kk,sep=""),flu.type="H3FS",simDat=T,year_test=c(2009),btstrap=10) #H3 FluScape
# Plot convergence for MCMC chains for H3 Vietnam simulated data
plot.multi.chain.posteriors(burnCut=0.25,flu.type="H3HN",simDat=T,year_test=c(2007:2012),
linearFn=T,loadpick = c(1))
foreach(kk=1:3) %dopar% {
simulation.infer(seed_i=kk,mcmc.iterations=1e2, flu.type="H3HN", strain.fix=T,
fit.spline=am.spl,vp1=0.4,linearFn=T) # Generate random data and run inference (strain.fix=T -> use Ha Nam strains)
}
# Plot convergence for MCMC chains for H3 Vietnam simulated data
plot.multi.chain.posteriors(burnCut=0.25,flu.type="H3HN",simDat=T,year_test=c(2007:2012),
linearFn=T,loadpick = c(1:3))
# Plot simulation study titres against inferred model
dy1=c(2007:2012)
kk=1
plot.posterior.titres(loadseed=paste("SIM_",kk,sep=""),flu.type="H3",simDat=T,year_test=c(2007:2012),btstrap=10,linearFn=T) #H3 Vietnam
#plot.posterior.titres(loadseed=paste("SIM_",kk,sep=""),flu.type="H3FS",simDat=T,year_test=c(2009),btstrap=10) #H3 FluScape
simulation.infer(seed_i=kk,mcmc.iterations=5, flu.type="H3HN", strain.fix=T,
fit.spline=am.spl,vp1=0.4,linearFn=T) # Generate random data and run inference (strain.fix=T -> use Ha Nam strains)
# Plot simulation study titres against inferred model
dy1=c(2007:2012)
kk=1
plot.posterior.titres(loadseed=paste("SIM_",kk,sep=""),flu.type="H3",simDat=T,year_test=c(2007:2012),btstrap=10,linearFn=T) #H3 Vietnam
#plot.posterior.titres(loadseed=paste("SIM_",kk,sep=""),flu.type="H3FS",simDat=T,year_test=c(2009),btstrap=10) #H3 FluScape
foreach(kk=1:2) %dopar% {
simulation.infer(seed_i=kk,mcmc.iterations=10, flu.type="H3HN", strain.fix=T,
fit.spline=am.spl,vp1=0.4,linearFn=T) # Generate random data and run inference (strain.fix=T -> use Ha Nam strains)
}
# Plot convergence for MCMC chains for H3 Vietnam simulated data
plot.multi.chain.posteriors(burnCut=0.25,flu.type="H3HN",simDat=T,year_test=c(2007:2012),
linearFn=T,loadpick = c(1:2))
foreach(kk=1:2) %dopar% {
simulation.infer(seed_i=kk,mcmc.iterations=10, flu.type="H3HN", strain.fix=T,
fit.spline=am.spl,vp1=0.4,linearFn=T) # Generate random data and run inference (strain.fix=T -> use Ha Nam strains)
}
# Plot convergence for MCMC chains for H3 Vietnam simulated data
plot.multi.chain.posteriors(burnCut=0.25,flu.type="H3HN",simDat=T,year_test=c(2007:2012),
linearFn=T,loadpick = c(1:2))
foreach(kk=1:2) %dopar% {
simulation.infer(seed_i=kk,mcmc.iterations=10, flu.type="H3HN", strain.fix=T,
fit.spline=am.spl,vp1=0.4,linearFn=T) # Generate random data and run inference (strain.fix=T -> use Ha Nam strains)
}
# Plot convergence for MCMC chains for H3 Vietnam simulated data
plot.multi.chain.posteriors(burnCut=0.25,flu.type="H3HN",simDat=T,year_test=c(2007:2012),
linearFn=T,loadpick = c(1:2))
# Plot simulation study titres against inferred model
dy1=c(2007:2012)
kk=1
plot.posterior.titres(loadseed=paste("SIM_",kk,sep=""),flu.type="H3",simDat=T,year_test=c(2007:2012),btstrap=10,linearFn=T) #H3 Vietnam
#plot.posterior.titres(loadseed=paste("SIM_",kk,sep=""),flu.type="H3FS",simDat=T,year_test=c(2009),btstrap=10) #H3 FluScape
simulation.infer(seed_i=kk,mcmc.iterations=5, flu.type="H3HN", strain.fix=T,
fit.spline=am.spl,vp1=0.4,linearFn=T) # Generate random data and run inference (strain.fix=T -> use Ha Nam strains)
foreach(kk=1:2) %dopar% {
simulation.infer(seed_i=kk,mcmc.iterations=10, flu.type="H3HN", strain.fix=T,
fit.spline=am.spl,vp1=0.4,linearFn=T) # Generate random data and run inference (strain.fix=T -> use Ha Nam strains)
}
# Plot convergence for MCMC chains for H3 Vietnam simulated data
plot.multi.chain.posteriors(burnCut=0.25,flu.type="H3HN",simDat=T,year_test=c(2007:2012),
linearFn=T,loadpick = c(1:2))
source("sero_functions.R")
source("posterior_analysis_flu.R")
source("sero_funcs_steven.r") # Load Flu B format
foreach(kk=1:2) %dopar% {
simulation.infer(seed_i=kk,mcmc.iterations=10, flu.type="H3HN", strain.fix=T,
fit.spline=am.spl,vp1=0.4,linearFn=T) # Generate random data and run inference (strain.fix=T -> use Ha Nam strains)
}
# Plot convergence for MCMC chains for H3 Vietnam simulated data
plot.multi.chain.posteriors(burnCut=0.25,flu.type="H3HN",simDat=T,year_test=c(2007:2012),
linearFn=T,loadpick = c(1:2))
# Plot simulation study titres against inferred model
dy1=c(2007:2012)
kk=1
plot.posterior.titres(loadseed=paste("SIM_",kk,sep=""),flu.type="H3",simDat=T,year_test=c(2007:2012),btstrap=10,linearFn=T) #H3 Vietnam
#plot.posterior.titres(loadseed=paste("SIM_",kk,sep=""),flu.type="H3FS",simDat=T,year_test=c(2009),btstrap=10) #H3 FluScape
source("sero_functions.R")
source("posterior_analysis_flu.R")
source("sero_funcs_steven.r") # Load Flu B format
foreach(kk=1:2) %dopar% {
simulation.infer(seed_i=kk,mcmc.iterations=1e2, flu.type="H3HN", strain.fix=T,
fit.spline=am.spl,vp1=0.4,linearFn=T) # Generate random data and run inference (strain.fix=T -> use Ha Nam strains)
}
# Plot convergence for MCMC chains for H3 Vietnam simulated data
plot.multi.chain.posteriors(burnCut=0.25,flu.type="H3HN",simDat=T,year_test=c(2007:2012),
linearFn=T,loadpick = c(1:2))
foreach(kk=1:2) %dopar% {
simulation.infer(seed_i=kk,mcmc.iterations=1e3, flu.type="H3HN", strain.fix=T,
fit.spline=am.spl,vp1=0.4,linearFn=T) # Generate random data and run inference (strain.fix=T -> use Ha Nam strains)
}
# Plot convergence for MCMC chains for H3 Vietnam simulated data
plot.multi.chain.posteriors(burnCut=0.25,flu.type="H3HN",simDat=T,year_test=c(2007:2012),
linearFn=T,loadpick = c(1:2))
# Plot simulation study titres against inferred model
dy1=c(2007:2012)
kk=1
plot.posterior.titres(loadseed=paste("SIM_",kk,sep=""),flu.type="H3",simDat=T,year_test=c(2007:2012),btstrap=10,linearFn=T) #H3 Vietnam
#plot.posterior.titres(loadseed=paste("SIM_",kk,sep=""),flu.type="H3FS",simDat=T,year_test=c(2009),btstrap=10) #H3 FluScape
# Plot simulation study titres against inferred model
dy1=c(2007:2012)
kk=2
plot.posterior.titres(loadseed=paste("SIM_",kk,sep=""),flu.type="H3",simDat=T,year_test=c(2007:2012),btstrap=10,linearFn=T) #H3 Vietnam
#plot.posterior.titres(loadseed=paste("SIM_",kk,sep=""),flu.type="H3FS",simDat=T,year_test=c(2009),btstrap=10) #H3 FluScape
source("sero_functions.R")
source("posterior_analysis_flu.R")
source("sero_funcs_steven.r") # Load Flu B format
foreach(kk=1:3) %dopar% {
simulation.infer(seed_i=kk,mcmc.iterations=1e3, flu.type="H3HN", strain.fix=T,
fit.spline=am.spl,vp1=0.4,linearFn=T) # Generate random data and run inference (strain.fix=T -> use Ha Nam strains)
}
# Plot convergence for MCMC chains for H3 Vietnam simulated data
plot.multi.chain.posteriors(burnCut=0.25,flu.type="H3HN",simDat=T,year_test=c(2007:2012),
linearFn=T,loadpick = c(1:3))
foreach(kk=1:3) %dopar% {
simulation.infer(seed_i=kk,mcmc.iterations=1e4, flu.type="H3HN", strain.fix=T,
fit.spline=am.spl,vp1=0.4,linearFn=T) # Generate random data and run inference (strain.fix=T -> use Ha Nam strains)
}
